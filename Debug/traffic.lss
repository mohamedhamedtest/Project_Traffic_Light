
traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00002956  000029ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080009e  0080009e  00002a28  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cae  00000000  00000000  00004ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005776  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000058b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000766f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000855a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009308  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000096f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ec3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 12 	call	0x2490	; 0x2490 <main>
      8a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer_CTC_init_interrupt>:
#include "../LIB/std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer.h"
void timer_CTC_init_interrupt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=78;
     b5c:	ec e5       	ldi	r30, 0x5C	; 92
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8e e4       	ldi	r24, 0x4E	; 78
     b62:	80 83       	st	Z, r24
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
     b64:	a3 e5       	ldi	r26, 0x53	; 83
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e3 e5       	ldi	r30, 0x53	; 83
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	81 60       	ori	r24, 0x01	; 1
     b70:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     b72:	a3 e5       	ldi	r26, 0x53	; 83
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e3 e5       	ldi	r30, 0x53	; 83
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	84 60       	ori	r24, 0x04	; 4
     b7e:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
     b80:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
     b82:	a9 e5       	ldi	r26, 0x59	; 89
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e9 e5       	ldi	r30, 0x59	; 89
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	8c 93       	st	X, r24
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     b9e:	a7 e3       	ldi	r26, 0x37	; 55
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e7 e3       	ldi	r30, 0x37	; 55
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	8c 93       	st	X, r24
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     bac:	a3 e5       	ldi	r26, 0x53	; 83
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e3 e5       	ldi	r30, 0x53	; 83
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 60       	ori	r24, 0x08	; 8
     bb8:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     bba:	ec e5       	ldi	r30, 0x5C	; 92
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     bc2:	a3 e5       	ldi	r26, 0x53	; 83
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e3 e5       	ldi	r30, 0x53	; 83
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	81 60       	ori	r24, 0x01	; 1
     bce:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     bd0:	a3 e5       	ldi	r26, 0x53	; 83
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e3 e5       	ldi	r30, 0x53	; 83
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	84 60       	ori	r24, 0x04	; 4
     bdc:	8c 93       	st	X, r24
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
     bde:	a3 e5       	ldi	r26, 0x53	; 83
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e3 e5       	ldi	r30, 0x53	; 83
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 61       	ori	r24, 0x10	; 16
     bea:	8c 93       	st	X, r24
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     bfa:	a7 e3       	ldi	r26, 0x37	; 55
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e7 e3       	ldi	r30, 0x37	; 55
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	88 60       	ori	r24, 0x08	; 8
     c06:	8c 93       	st	X, r24
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
     c08:	a3 e5       	ldi	r26, 0x53	; 83
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e3 e5       	ldi	r30, 0x53	; 83
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
     c16:	a3 e5       	ldi	r26, 0x53	; 83
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e3 e5       	ldi	r30, 0x53	; 83
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	88 60       	ori	r24, 0x08	; 8
     c22:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     c24:	ec e5       	ldi	r30, 0x5C	; 92
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 e4       	ldi	r24, 0x40	; 64
     c2a:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     c2c:	a3 e5       	ldi	r26, 0x53	; 83
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e3 e5       	ldi	r30, 0x53	; 83
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	81 60       	ori	r24, 0x01	; 1
     c38:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     c3a:	a3 e5       	ldi	r26, 0x53	; 83
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e3 e5       	ldi	r30, 0x53	; 83
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	84 60       	ori	r24, 0x04	; 4
     c46:	8c 93       	st	X, r24
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
     c48:	a3 e5       	ldi	r26, 0x53	; 83
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e3 e5       	ldi	r30, 0x53	; 83
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 61       	ori	r24, 0x10	; 16
     c54:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     c56:	a3 e5       	ldi	r26, 0x53	; 83
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e3 e5       	ldi	r30, 0x53	; 83
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	80 62       	ori	r24, 0x20	; 32
     c62:	8c 93       	st	X, r24
}
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     c72:	a7 e3       	ldi	r26, 0x37	; 55
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e3       	ldi	r30, 0x37	; 55
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	88 60       	ori	r24, 0x08	; 8
     c7e:	8c 93       	st	X, r24
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
     c80:	a3 e5       	ldi	r26, 0x53	; 83
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e3 e5       	ldi	r30, 0x53	; 83
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 64       	ori	r24, 0x40	; 64
     c8c:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     c8e:	ec e5       	ldi	r30, 0x5C	; 92
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 e4       	ldi	r24, 0x40	; 64
     c94:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     c96:	a3 e5       	ldi	r26, 0x53	; 83
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e3 e5       	ldi	r30, 0x53	; 83
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	81 60       	ori	r24, 0x01	; 1
     ca2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     ca4:	a3 e5       	ldi	r26, 0x53	; 83
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e3 e5       	ldi	r30, 0x53	; 83
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	84 60       	ori	r24, 0x04	; 4
     cb0:	8c 93       	st	X, r24
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
     cb2:	a3 e5       	ldi	r26, 0x53	; 83
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e3 e5       	ldi	r30, 0x53	; 83
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 61       	ori	r24, 0x10	; 16
     cbe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     cc0:	a3 e5       	ldi	r26, 0x53	; 83
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e3 e5       	ldi	r30, 0x53	; 83
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 62       	ori	r24, 0x20	; 32
     ccc:	8c 93       	st	X, r24
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <LED_vInit>:
*
*/
#include  "../LIB/STD_TYPES.h"
#include "../DIO/DIO.h"
void LED_vInit(u8 portname,u8 pinnumber)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <LED_vInit+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	6a 81       	ldd	r22, Y+2	; 0x02
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <LED_vTurnOn>:
void LED_vTurnOn(u8 portname,u8 pinnumber)
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <LED_vTurnOn+0x6>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	6a 81       	ldd	r22, Y+2	; 0x02
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_write>
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <LED_vTurnOff>:
void LED_vTurnOff(u8 portname,u8 pinnumber)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <LED_vTurnOff+0x6>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	6a 81       	ldd	r22, Y+2	; 0x02
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_write>
}
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <LED_vToggle>:
void LED_vToggle(u8 portname,u8 pinnumber)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <LED_vToggle+0x6>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	6a 81       	ldd	r22, Y+2	; 0x02
     d4c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <DIO_toggle>
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	c6 54       	subi	r28, 0x46	; 70
     d68:	d0 40       	sbci	r29, 0x00	; 0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	fe 01       	movw	r30, r28
     d76:	ed 5b       	subi	r30, 0xBD	; 189
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a8 e4       	ldi	r26, 0x48	; 72
     d80:	b3 e4       	ldi	r27, 0x43	; 67
     d82:	80 83       	st	Z, r24
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	a2 83       	std	Z+2, r26	; 0x02
     d88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8a:	8e 01       	movw	r16, r28
     d8c:	01 5c       	subi	r16, 0xC1	; 193
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	fe 01       	movw	r30, r28
     d92:	ed 5b       	subi	r30, 0xBD	; 189
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	4a ef       	ldi	r20, 0xFA	; 250
     da4:	54 e4       	ldi	r21, 0x44	; 68
     da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	f8 01       	movw	r30, r16
     db0:	80 83       	st	Z, r24
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	a2 83       	std	Z+2, r26	; 0x02
     db6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     db8:	fe 01       	movw	r30, r28
     dba:	ff 96       	adiw	r30, 0x3f	; 63
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	2c f4       	brge	.+10     	; 0xdde <LCD_vInit+0x84>
		__ticks = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9e af       	std	Y+62, r25	; 0x3e
     dda:	8d af       	std	Y+61, r24	; 0x3d
     ddc:	46 c0       	rjmp	.+140    	; 0xe6a <LCD_vInit+0x110>
	else if (__tmp > 65535)
     dde:	fe 01       	movw	r30, r28
     de0:	ff 96       	adiw	r30, 0x3f	; 63
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	3f ef       	ldi	r19, 0xFF	; 255
     dee:	4f e7       	ldi	r20, 0x7F	; 127
     df0:	57 e4       	ldi	r21, 0x47	; 71
     df2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df6:	18 16       	cp	r1, r24
     df8:	64 f5       	brge	.+88     	; 0xe52 <LCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfa:	fe 01       	movw	r30, r28
     dfc:	ed 5b       	subi	r30, 0xBD	; 189
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e2       	ldi	r20, 0x20	; 32
     e0e:	51 e4       	ldi	r21, 0x41	; 65
     e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e af       	std	Y+62, r25	; 0x3e
     e26:	8d af       	std	Y+61, r24	; 0x3d
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <LCD_vInit+0xee>
     e2a:	88 ec       	ldi	r24, 0xC8	; 200
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9c af       	std	Y+60, r25	; 0x3c
     e30:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e32:	8b ad       	ldd	r24, Y+59	; 0x3b
     e34:	9c ad       	ldd	r25, Y+60	; 0x3c
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <LCD_vInit+0xdc>
     e3a:	9c af       	std	Y+60, r25	; 0x3c
     e3c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e40:	9e ad       	ldd	r25, Y+62	; 0x3e
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	9e af       	std	Y+62, r25	; 0x3e
     e46:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	8d ad       	ldd	r24, Y+61	; 0x3d
     e4a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	69 f7       	brne	.-38     	; 0xe2a <LCD_vInit+0xd0>
     e50:	16 c0       	rjmp	.+44     	; 0xe7e <LCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	fe 01       	movw	r30, r28
     e54:	ff 96       	adiw	r30, 0x3f	; 63
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	9e af       	std	Y+62, r25	; 0x3e
     e68:	8d af       	std	Y+61, r24	; 0x3d
     e6a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e6c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e6e:	9a af       	std	Y+58, r25	; 0x3a
     e70:	89 af       	std	Y+57, r24	; 0x39
     e72:	89 ad       	ldd	r24, Y+57	; 0x39
     e74:	9a ad       	ldd	r25, Y+58	; 0x3a
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <LCD_vInit+0x11c>
     e7a:	9a af       	std	Y+58, r25	; 0x3a
     e7c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
     e7e:	81 e4       	ldi	r24, 0x41	; 65
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
     e88:	81 e4       	ldi	r24, 0x41	; 65
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
     e92:	81 e4       	ldi	r24, 0x41	; 65
     e94:	62 e0       	ldi	r22, 0x02	; 2
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
     e9c:	81 e4       	ldi	r24, 0x41	; 65
     e9e:	63 e0       	ldi	r22, 0x03	; 3
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
     ea6:	81 e4       	ldi	r24, 0x41	; 65
     ea8:	64 e0       	ldi	r22, 0x04	; 4
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
     eb0:	81 e4       	ldi	r24, 0x41	; 65
     eb2:	65 e0       	ldi	r22, 0x05	; 5
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
     eba:	81 e4       	ldi	r24, 0x41	; 65
     ebc:	66 e0       	ldi	r22, 0x06	; 6
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
     ec4:	81 e4       	ldi	r24, 0x41	; 65
     ec6:	67 e0       	ldi	r22, 0x07	; 7
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
     ece:	82 e4       	ldi	r24, 0x42	; 66
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
     ed8:	82 e4       	ldi	r24, 0x42	; 66
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
     ee2:	82 e4       	ldi	r24, 0x42	; 66
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
     eec:	82 e4       	ldi	r24, 0x42	; 66
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
     ef6:	88 e3       	ldi	r24, 0x38	; 56
     ef8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_vSend_cmd>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a0 e8       	ldi	r26, 0x80	; 128
     f02:	bf e3       	ldi	r27, 0x3F	; 63
     f04:	8d ab       	std	Y+53, r24	; 0x35
     f06:	9e ab       	std	Y+54, r25	; 0x36
     f08:	af ab       	std	Y+55, r26	; 0x37
     f0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0c:	6d a9       	ldd	r22, Y+53	; 0x35
     f0e:	7e a9       	ldd	r23, Y+54	; 0x36
     f10:	8f a9       	ldd	r24, Y+55	; 0x37
     f12:	98 ad       	ldd	r25, Y+56	; 0x38
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	4a ef       	ldi	r20, 0xFA	; 250
     f1a:	54 e4       	ldi	r21, 0x44	; 68
     f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	89 ab       	std	Y+49, r24	; 0x31
     f26:	9a ab       	std	Y+50, r25	; 0x32
     f28:	ab ab       	std	Y+51, r26	; 0x33
     f2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f2c:	69 a9       	ldd	r22, Y+49	; 0x31
     f2e:	7a a9       	ldd	r23, Y+50	; 0x32
     f30:	8b a9       	ldd	r24, Y+51	; 0x33
     f32:	9c a9       	ldd	r25, Y+52	; 0x34
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f40:	88 23       	and	r24, r24
     f42:	2c f4       	brge	.+10     	; 0xf4e <LCD_vInit+0x1f4>
		__ticks = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	98 ab       	std	Y+48, r25	; 0x30
     f4a:	8f a7       	std	Y+47, r24	; 0x2f
     f4c:	3f c0       	rjmp	.+126    	; 0xfcc <LCD_vInit+0x272>
	else if (__tmp > 65535)
     f4e:	69 a9       	ldd	r22, Y+49	; 0x31
     f50:	7a a9       	ldd	r23, Y+50	; 0x32
     f52:	8b a9       	ldd	r24, Y+51	; 0x33
     f54:	9c a9       	ldd	r25, Y+52	; 0x34
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	3f ef       	ldi	r19, 0xFF	; 255
     f5a:	4f e7       	ldi	r20, 0x7F	; 127
     f5c:	57 e4       	ldi	r21, 0x47	; 71
     f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f62:	18 16       	cp	r1, r24
     f64:	4c f5       	brge	.+82     	; 0xfb8 <LCD_vInit+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	6d a9       	ldd	r22, Y+53	; 0x35
     f68:	7e a9       	ldd	r23, Y+54	; 0x36
     f6a:	8f a9       	ldd	r24, Y+55	; 0x37
     f6c:	98 ad       	ldd	r25, Y+56	; 0x38
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	98 ab       	std	Y+48, r25	; 0x30
     f8c:	8f a7       	std	Y+47, r24	; 0x2f
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <LCD_vInit+0x254>
     f90:	88 ec       	ldi	r24, 0xC8	; 200
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9e a7       	std	Y+46, r25	; 0x2e
     f96:	8d a7       	std	Y+45, r24	; 0x2d
     f98:	8d a5       	ldd	r24, Y+45	; 0x2d
     f9a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <LCD_vInit+0x242>
     fa0:	9e a7       	std	Y+46, r25	; 0x2e
     fa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
     fa6:	98 a9       	ldd	r25, Y+48	; 0x30
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	98 ab       	std	Y+48, r25	; 0x30
     fac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb0:	98 a9       	ldd	r25, Y+48	; 0x30
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f7       	brne	.-38     	; 0xf90 <LCD_vInit+0x236>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <LCD_vInit+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	69 a9       	ldd	r22, Y+49	; 0x31
     fba:	7a a9       	ldd	r23, Y+50	; 0x32
     fbc:	8b a9       	ldd	r24, Y+51	; 0x33
     fbe:	9c a9       	ldd	r25, Y+52	; 0x34
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	98 ab       	std	Y+48, r25	; 0x30
     fca:	8f a7       	std	Y+47, r24	; 0x2f
     fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
     fce:	98 a9       	ldd	r25, Y+48	; 0x30
     fd0:	9c a7       	std	Y+44, r25	; 0x2c
     fd2:	8b a7       	std	Y+43, r24	; 0x2b
     fd4:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd6:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <LCD_vInit+0x27e>
     fdc:	9c a7       	std	Y+44, r25	; 0x2c
     fde:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     fe0:	8c e0       	ldi	r24, 0x0C	; 12
     fe2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_vSend_cmd>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 e8       	ldi	r26, 0x80	; 128
     fec:	bf e3       	ldi	r27, 0x3F	; 63
     fee:	8f a3       	std	Y+39, r24	; 0x27
     ff0:	98 a7       	std	Y+40, r25	; 0x28
     ff2:	a9 a7       	std	Y+41, r26	; 0x29
     ff4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff6:	6f a1       	ldd	r22, Y+39	; 0x27
     ff8:	78 a5       	ldd	r23, Y+40	; 0x28
     ffa:	89 a5       	ldd	r24, Y+41	; 0x29
     ffc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4a ef       	ldi	r20, 0xFA	; 250
    1004:	54 e4       	ldi	r21, 0x44	; 68
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	8b a3       	std	Y+35, r24	; 0x23
    1010:	9c a3       	std	Y+36, r25	; 0x24
    1012:	ad a3       	std	Y+37, r26	; 0x25
    1014:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1016:	6b a1       	ldd	r22, Y+35	; 0x23
    1018:	7c a1       	ldd	r23, Y+36	; 0x24
    101a:	8d a1       	ldd	r24, Y+37	; 0x25
    101c:	9e a1       	ldd	r25, Y+38	; 0x26
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	5f e3       	ldi	r21, 0x3F	; 63
    1026:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102a:	88 23       	and	r24, r24
    102c:	2c f4       	brge	.+10     	; 0x1038 <LCD_vInit+0x2de>
		__ticks = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9a a3       	std	Y+34, r25	; 0x22
    1034:	89 a3       	std	Y+33, r24	; 0x21
    1036:	3f c0       	rjmp	.+126    	; 0x10b6 <LCD_vInit+0x35c>
	else if (__tmp > 65535)
    1038:	6b a1       	ldd	r22, Y+35	; 0x23
    103a:	7c a1       	ldd	r23, Y+36	; 0x24
    103c:	8d a1       	ldd	r24, Y+37	; 0x25
    103e:	9e a1       	ldd	r25, Y+38	; 0x26
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	3f ef       	ldi	r19, 0xFF	; 255
    1044:	4f e7       	ldi	r20, 0x7F	; 127
    1046:	57 e4       	ldi	r21, 0x47	; 71
    1048:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104c:	18 16       	cp	r1, r24
    104e:	4c f5       	brge	.+82     	; 0x10a2 <LCD_vInit+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1050:	6f a1       	ldd	r22, Y+39	; 0x27
    1052:	78 a5       	ldd	r23, Y+40	; 0x28
    1054:	89 a5       	ldd	r24, Y+41	; 0x29
    1056:	9a a5       	ldd	r25, Y+42	; 0x2a
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	51 e4       	ldi	r21, 0x41	; 65
    1060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	9a a3       	std	Y+34, r25	; 0x22
    1076:	89 a3       	std	Y+33, r24	; 0x21
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <LCD_vInit+0x33e>
    107a:	88 ec       	ldi	r24, 0xC8	; 200
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	98 a3       	std	Y+32, r25	; 0x20
    1080:	8f 8f       	std	Y+31, r24	; 0x1f
    1082:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1084:	98 a1       	ldd	r25, Y+32	; 0x20
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <LCD_vInit+0x32c>
    108a:	98 a3       	std	Y+32, r25	; 0x20
    108c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108e:	89 a1       	ldd	r24, Y+33	; 0x21
    1090:	9a a1       	ldd	r25, Y+34	; 0x22
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	9a a3       	std	Y+34, r25	; 0x22
    1096:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1098:	89 a1       	ldd	r24, Y+33	; 0x21
    109a:	9a a1       	ldd	r25, Y+34	; 0x22
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	69 f7       	brne	.-38     	; 0x107a <LCD_vInit+0x320>
    10a0:	14 c0       	rjmp	.+40     	; 0x10ca <LCD_vInit+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a2:	6b a1       	ldd	r22, Y+35	; 0x23
    10a4:	7c a1       	ldd	r23, Y+36	; 0x24
    10a6:	8d a1       	ldd	r24, Y+37	; 0x25
    10a8:	9e a1       	ldd	r25, Y+38	; 0x26
    10aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	9a a3       	std	Y+34, r25	; 0x22
    10b4:	89 a3       	std	Y+33, r24	; 0x21
    10b6:	89 a1       	ldd	r24, Y+33	; 0x21
    10b8:	9a a1       	ldd	r25, Y+34	; 0x22
    10ba:	9e 8f       	std	Y+30, r25	; 0x1e
    10bc:	8d 8f       	std	Y+29, r24	; 0x1d
    10be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <LCD_vInit+0x368>
    10c6:	9e 8f       	std	Y+30, r25	; 0x1e
    10c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_vSend_cmd>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e2       	ldi	r26, 0x20	; 32
    10d6:	b1 e4       	ldi	r27, 0x41	; 65
    10d8:	89 8f       	std	Y+25, r24	; 0x19
    10da:	9a 8f       	std	Y+26, r25	; 0x1a
    10dc:	ab 8f       	std	Y+27, r26	; 0x1b
    10de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e0:	69 8d       	ldd	r22, Y+25	; 0x19
    10e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	4a ef       	ldi	r20, 0xFA	; 250
    10ee:	54 e4       	ldi	r21, 0x44	; 68
    10f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	8d 8b       	std	Y+21, r24	; 0x15
    10fa:	9e 8b       	std	Y+22, r25	; 0x16
    10fc:	af 8b       	std	Y+23, r26	; 0x17
    10fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1100:	6d 89       	ldd	r22, Y+21	; 0x15
    1102:	7e 89       	ldd	r23, Y+22	; 0x16
    1104:	8f 89       	ldd	r24, Y+23	; 0x17
    1106:	98 8d       	ldd	r25, Y+24	; 0x18
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	5f e3       	ldi	r21, 0x3F	; 63
    1110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1114:	88 23       	and	r24, r24
    1116:	2c f4       	brge	.+10     	; 0x1122 <LCD_vInit+0x3c8>
		__ticks = 1;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9c 8b       	std	Y+20, r25	; 0x14
    111e:	8b 8b       	std	Y+19, r24	; 0x13
    1120:	3f c0       	rjmp	.+126    	; 0x11a0 <LCD_vInit+0x446>
	else if (__tmp > 65535)
    1122:	6d 89       	ldd	r22, Y+21	; 0x15
    1124:	7e 89       	ldd	r23, Y+22	; 0x16
    1126:	8f 89       	ldd	r24, Y+23	; 0x17
    1128:	98 8d       	ldd	r25, Y+24	; 0x18
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	3f ef       	ldi	r19, 0xFF	; 255
    112e:	4f e7       	ldi	r20, 0x7F	; 127
    1130:	57 e4       	ldi	r21, 0x47	; 71
    1132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1136:	18 16       	cp	r1, r24
    1138:	4c f5       	brge	.+82     	; 0x118c <LCD_vInit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113a:	69 8d       	ldd	r22, Y+25	; 0x19
    113c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    113e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e2       	ldi	r20, 0x20	; 32
    1148:	51 e4       	ldi	r21, 0x41	; 65
    114a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	9c 8b       	std	Y+20, r25	; 0x14
    1160:	8b 8b       	std	Y+19, r24	; 0x13
    1162:	0f c0       	rjmp	.+30     	; 0x1182 <LCD_vInit+0x428>
    1164:	88 ec       	ldi	r24, 0xC8	; 200
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9a 8b       	std	Y+18, r25	; 0x12
    116a:	89 8b       	std	Y+17, r24	; 0x11
    116c:	89 89       	ldd	r24, Y+17	; 0x11
    116e:	9a 89       	ldd	r25, Y+18	; 0x12
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <LCD_vInit+0x416>
    1174:	9a 8b       	std	Y+18, r25	; 0x12
    1176:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1178:	8b 89       	ldd	r24, Y+19	; 0x13
    117a:	9c 89       	ldd	r25, Y+20	; 0x14
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	9c 8b       	std	Y+20, r25	; 0x14
    1180:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1182:	8b 89       	ldd	r24, Y+19	; 0x13
    1184:	9c 89       	ldd	r25, Y+20	; 0x14
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	69 f7       	brne	.-38     	; 0x1164 <LCD_vInit+0x40a>
    118a:	14 c0       	rjmp	.+40     	; 0x11b4 <LCD_vInit+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118c:	6d 89       	ldd	r22, Y+21	; 0x15
    118e:	7e 89       	ldd	r23, Y+22	; 0x16
    1190:	8f 89       	ldd	r24, Y+23	; 0x17
    1192:	98 8d       	ldd	r25, Y+24	; 0x18
    1194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	9c 8b       	std	Y+20, r25	; 0x14
    119e:	8b 8b       	std	Y+19, r24	; 0x13
    11a0:	8b 89       	ldd	r24, Y+19	; 0x13
    11a2:	9c 89       	ldd	r25, Y+20	; 0x14
    11a4:	98 8b       	std	Y+16, r25	; 0x10
    11a6:	8f 87       	std	Y+15, r24	; 0x0f
    11a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11aa:	98 89       	ldd	r25, Y+16	; 0x10
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <LCD_vInit+0x452>
    11b0:	98 8b       	std	Y+16, r25	; 0x10
    11b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    11b4:	86 e0       	ldi	r24, 0x06	; 6
    11b6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_vSend_cmd>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a0 e8       	ldi	r26, 0x80	; 128
    11c0:	bf e3       	ldi	r27, 0x3F	; 63
    11c2:	8b 87       	std	Y+11, r24	; 0x0b
    11c4:	9c 87       	std	Y+12, r25	; 0x0c
    11c6:	ad 87       	std	Y+13, r26	; 0x0d
    11c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    11cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	4a ef       	ldi	r20, 0xFA	; 250
    11d8:	54 e4       	ldi	r21, 0x44	; 68
    11da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	8f 83       	std	Y+7, r24	; 0x07
    11e4:	98 87       	std	Y+8, r25	; 0x08
    11e6:	a9 87       	std	Y+9, r26	; 0x09
    11e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ea:	6f 81       	ldd	r22, Y+7	; 0x07
    11ec:	78 85       	ldd	r23, Y+8	; 0x08
    11ee:	89 85       	ldd	r24, Y+9	; 0x09
    11f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e8       	ldi	r20, 0x80	; 128
    11f8:	5f e3       	ldi	r21, 0x3F	; 63
    11fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fe:	88 23       	and	r24, r24
    1200:	2c f4       	brge	.+10     	; 0x120c <LCD_vInit+0x4b2>
		__ticks = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
    120a:	3f c0       	rjmp	.+126    	; 0x128a <LCD_vInit+0x530>
	else if (__tmp > 65535)
    120c:	6f 81       	ldd	r22, Y+7	; 0x07
    120e:	78 85       	ldd	r23, Y+8	; 0x08
    1210:	89 85       	ldd	r24, Y+9	; 0x09
    1212:	9a 85       	ldd	r25, Y+10	; 0x0a
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	3f ef       	ldi	r19, 0xFF	; 255
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	57 e4       	ldi	r21, 0x47	; 71
    121c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1220:	18 16       	cp	r1, r24
    1222:	4c f5       	brge	.+82     	; 0x1276 <LCD_vInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1224:	6b 85       	ldd	r22, Y+11	; 0x0b
    1226:	7c 85       	ldd	r23, Y+12	; 0x0c
    1228:	8d 85       	ldd	r24, Y+13	; 0x0d
    122a:	9e 85       	ldd	r25, Y+14	; 0x0e
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	0f c0       	rjmp	.+30     	; 0x126c <LCD_vInit+0x512>
    124e:	88 ec       	ldi	r24, 0xC8	; 200
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <LCD_vInit+0x500>
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	69 f7       	brne	.-38     	; 0x124e <LCD_vInit+0x4f4>
    1274:	14 c0       	rjmp	.+40     	; 0x129e <LCD_vInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1276:	6f 81       	ldd	r22, Y+7	; 0x07
    1278:	78 85       	ldd	r23, Y+8	; 0x08
    127a:	89 85       	ldd	r24, Y+9	; 0x09
    127c:	9a 85       	ldd	r25, Y+10	; 0x0a
    127e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	8d 83       	std	Y+5, r24	; 0x05
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <LCD_vInit+0x53c>
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
    129e:	ca 5b       	subi	r28, 0xBA	; 186
    12a0:	df 4f       	sbci	r29, 0xFF	; 255
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <send_falling_edge>:


static void send_falling_edge(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	6c 97       	sbiw	r28, 0x1c	; 28
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    12ca:	82 e4       	ldi	r24, 0x42	; 66
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_write>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a0 e0       	ldi	r26, 0x00	; 0
    12da:	b0 e4       	ldi	r27, 0x40	; 64
    12dc:	89 8f       	std	Y+25, r24	; 0x19
    12de:	9a 8f       	std	Y+26, r25	; 0x1a
    12e0:	ab 8f       	std	Y+27, r26	; 0x1b
    12e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	69 8d       	ldd	r22, Y+25	; 0x19
    12e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a ef       	ldi	r20, 0xFA	; 250
    12f2:	54 e4       	ldi	r21, 0x44	; 68
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8d 8b       	std	Y+21, r24	; 0x15
    12fe:	9e 8b       	std	Y+22, r25	; 0x16
    1300:	af 8b       	std	Y+23, r26	; 0x17
    1302:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1304:	6d 89       	ldd	r22, Y+21	; 0x15
    1306:	7e 89       	ldd	r23, Y+22	; 0x16
    1308:	8f 89       	ldd	r24, Y+23	; 0x17
    130a:	98 8d       	ldd	r25, Y+24	; 0x18
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <send_falling_edge+0x70>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9c 8b       	std	Y+20, r25	; 0x14
    1322:	8b 8b       	std	Y+19, r24	; 0x13
    1324:	3f c0       	rjmp	.+126    	; 0x13a4 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	4c f5       	brge	.+82     	; 0x1390 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	69 8d       	ldd	r22, Y+25	; 0x19
    1340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9c 8b       	std	Y+20, r25	; 0x14
    1364:	8b 8b       	std	Y+19, r24	; 0x13
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <send_falling_edge+0xd0>
    1368:	88 ec       	ldi	r24, 0xC8	; 200
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9a 8b       	std	Y+18, r25	; 0x12
    136e:	89 8b       	std	Y+17, r24	; 0x11
    1370:	89 89       	ldd	r24, Y+17	; 0x11
    1372:	9a 89       	ldd	r25, Y+18	; 0x12
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <send_falling_edge+0xbe>
    1378:	9a 8b       	std	Y+18, r25	; 0x12
    137a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	8b 89       	ldd	r24, Y+19	; 0x13
    137e:	9c 89       	ldd	r25, Y+20	; 0x14
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9c 8b       	std	Y+20, r25	; 0x14
    1384:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	69 f7       	brne	.-38     	; 0x1368 <send_falling_edge+0xb2>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1390:	6d 89       	ldd	r22, Y+21	; 0x15
    1392:	7e 89       	ldd	r23, Y+22	; 0x16
    1394:	8f 89       	ldd	r24, Y+23	; 0x17
    1396:	98 8d       	ldd	r25, Y+24	; 0x18
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9c 8b       	std	Y+20, r25	; 0x14
    13a2:	8b 8b       	std	Y+19, r24	; 0x13
    13a4:	8b 89       	ldd	r24, Y+19	; 0x13
    13a6:	9c 89       	ldd	r25, Y+20	; 0x14
    13a8:	98 8b       	std	Y+16, r25	; 0x10
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
    13ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ae:	98 89       	ldd	r25, Y+16	; 0x10
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <send_falling_edge+0xfa>
    13b4:	98 8b       	std	Y+16, r25	; 0x10
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('B',EN,0);
    13b8:	82 e4       	ldi	r24, 0x42	; 66
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_write>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e4       	ldi	r27, 0x40	; 64
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	ad 87       	std	Y+13, r26	; 0x0d
    13d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a ef       	ldi	r20, 0xFA	; 250
    13e0:	54 e4       	ldi	r21, 0x44	; 68
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	a9 87       	std	Y+9, r26	; 0x09
    13f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <send_falling_edge+0x15e>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <send_falling_edge+0x1be>
    1456:	88 ec       	ldi	r24, 0xC8	; 200
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <send_falling_edge+0x1ac>
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <send_falling_edge+0x1a0>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <send_falling_edge+0x1e8>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    14a6:	6c 96       	adiw	r28, 0x1c	; 28
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	2f 97       	sbiw	r28, 0x0f	; 15
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
    14ce:	81 e4       	ldi	r24, 0x41	; 65
    14d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    14d2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <DIO_write_port>
	DIO_write('B',RS,0);
    14d6:	82 e4       	ldi	r24, 0x42	; 66
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_write>
	send_falling_edge();
    14e0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <send_falling_edge>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e8       	ldi	r26, 0x80	; 128
    14ea:	bf e3       	ldi	r27, 0x3F	; 63
    14ec:	8b 87       	std	Y+11, r24	; 0x0b
    14ee:	9c 87       	std	Y+12, r25	; 0x0c
    14f0:	ad 87       	std	Y+13, r26	; 0x0d
    14f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	4a ef       	ldi	r20, 0xFA	; 250
    1502:	54 e4       	ldi	r21, 0x44	; 68
    1504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	8f 83       	std	Y+7, r24	; 0x07
    150e:	98 87       	std	Y+8, r25	; 0x08
    1510:	a9 87       	std	Y+9, r26	; 0x09
    1512:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1514:	6f 81       	ldd	r22, Y+7	; 0x07
    1516:	78 85       	ldd	r23, Y+8	; 0x08
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	5f e3       	ldi	r21, 0x3F	; 63
    1524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1528:	88 23       	and	r24, r24
    152a:	2c f4       	brge	.+10     	; 0x1536 <LCD_vSend_cmd+0x7e>
		__ticks = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	3f c0       	rjmp	.+126    	; 0x15b4 <LCD_vSend_cmd+0xfc>
	else if (__tmp > 65535)
    1536:	6f 81       	ldd	r22, Y+7	; 0x07
    1538:	78 85       	ldd	r23, Y+8	; 0x08
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	4f e7       	ldi	r20, 0x7F	; 127
    1544:	57 e4       	ldi	r21, 0x47	; 71
    1546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154a:	18 16       	cp	r1, r24
    154c:	4c f5       	brge	.+82     	; 0x15a0 <LCD_vSend_cmd+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1550:	7c 85       	ldd	r23, Y+12	; 0x0c
    1552:	8d 85       	ldd	r24, Y+13	; 0x0d
    1554:	9e 85       	ldd	r25, Y+14	; 0x0e
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e2       	ldi	r20, 0x20	; 32
    155c:	51 e4       	ldi	r21, 0x41	; 65
    155e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <LCD_vSend_cmd+0xde>
    1578:	88 ec       	ldi	r24, 0xC8	; 200
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9c 83       	std	Y+4, r25	; 0x04
    157e:	8b 83       	std	Y+3, r24	; 0x03
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <LCD_vSend_cmd+0xcc>
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	69 f7       	brne	.-38     	; 0x1578 <LCD_vSend_cmd+0xc0>
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <LCD_vSend_cmd+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a0:	6f 81       	ldd	r22, Y+7	; 0x07
    15a2:	78 85       	ldd	r23, Y+8	; 0x08
    15a4:	89 85       	ldd	r24, Y+9	; 0x09
    15a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	9a 83       	std	Y+2, r25	; 0x02
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	9a 81       	ldd	r25, Y+2	; 0x02
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <LCD_vSend_cmd+0x108>
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    15c8:	2f 96       	adiw	r28, 0x0f	; 15
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2f 97       	sbiw	r28, 0x0f	; 15
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',data);
    15f0:	81 e4       	ldi	r24, 0x41	; 65
    15f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    15f4:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <DIO_write_port>
	DIO_write('B',RS,1);
    15f8:	82 e4       	ldi	r24, 0x42	; 66
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_write>
	send_falling_edge();
    1602:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <send_falling_edge>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e8       	ldi	r26, 0x80	; 128
    160c:	bf e3       	ldi	r27, 0x3F	; 63
    160e:	8b 87       	std	Y+11, r24	; 0x0b
    1610:	9c 87       	std	Y+12, r25	; 0x0c
    1612:	ad 87       	std	Y+13, r26	; 0x0d
    1614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	6b 85       	ldd	r22, Y+11	; 0x0b
    1618:	7c 85       	ldd	r23, Y+12	; 0x0c
    161a:	8d 85       	ldd	r24, Y+13	; 0x0d
    161c:	9e 85       	ldd	r25, Y+14	; 0x0e
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	4a ef       	ldi	r20, 0xFA	; 250
    1624:	54 e4       	ldi	r21, 0x44	; 68
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8f 83       	std	Y+7, r24	; 0x07
    1630:	98 87       	std	Y+8, r25	; 0x08
    1632:	a9 87       	std	Y+9, r26	; 0x09
    1634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <LCD_vSend_char+0x7e>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <LCD_vSend_char+0xfc>
	else if (__tmp > 65535)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166c:	18 16       	cp	r1, r24
    166e:	4c f5       	brge	.+82     	; 0x16c2 <LCD_vSend_char+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	6b 85       	ldd	r22, Y+11	; 0x0b
    1672:	7c 85       	ldd	r23, Y+12	; 0x0c
    1674:	8d 85       	ldd	r24, Y+13	; 0x0d
    1676:	9e 85       	ldd	r25, Y+14	; 0x0e
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <LCD_vSend_char+0xde>
    169a:	88 ec       	ldi	r24, 0xC8	; 200
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_vSend_char+0xcc>
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <LCD_vSend_char+0xc0>
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <LCD_vSend_char+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <LCD_vSend_char+0x108>
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    16ea:	2f 96       	adiw	r28, 0x0f	; 15
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <LCD_vSend_string+0x6>
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	0a c0       	rjmp	.+20     	; 0x1720 <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	80 81       	ld	r24, Z
    1712:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_vSend_char>
		data++;
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    1720:	e9 81       	ldd	r30, Y+1	; 0x01
    1722:	fa 81       	ldd	r31, Y+2	; 0x02
    1724:	80 81       	ld	r24, Z
    1726:	88 23       	and	r24, r24
    1728:	89 f7       	brne	.-30     	; 0x170c <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <LCD_clearscreen>:
void LCD_clearscreen()
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	2e 97       	sbiw	r28, 0x0e	; 14
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_vSend_cmd>
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a0 e2       	ldi	r26, 0x20	; 32
    1754:	b1 e4       	ldi	r27, 0x41	; 65
    1756:	8b 87       	std	Y+11, r24	; 0x0b
    1758:	9c 87       	std	Y+12, r25	; 0x0c
    175a:	ad 87       	std	Y+13, r26	; 0x0d
    175c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1760:	7c 85       	ldd	r23, Y+12	; 0x0c
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4a ef       	ldi	r20, 0xFA	; 250
    176c:	54 e4       	ldi	r21, 0x44	; 68
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8f 83       	std	Y+7, r24	; 0x07
    1778:	98 87       	std	Y+8, r25	; 0x08
    177a:	a9 87       	std	Y+9, r26	; 0x09
    177c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1792:	88 23       	and	r24, r24
    1794:	2c f4       	brge	.+10     	; 0x17a0 <LCD_clearscreen+0x6c>
		__ticks = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	8d 83       	std	Y+5, r24	; 0x05
    179e:	3f c0       	rjmp	.+126    	; 0x181e <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	4c f5       	brge	.+82     	; 0x180a <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    17bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17be:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e2       	ldi	r20, 0x20	; 32
    17c6:	51 e4       	ldi	r21, 0x41	; 65
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	0f c0       	rjmp	.+30     	; 0x1800 <LCD_clearscreen+0xcc>
    17e2:	88 ec       	ldi	r24, 0xC8	; 200
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9c 83       	std	Y+4, r25	; 0x04
    17e8:	8b 83       	std	Y+3, r24	; 0x03
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_clearscreen+0xba>
    17f2:	9c 83       	std	Y+4, r25	; 0x04
    17f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	69 f7       	brne	.-38     	; 0x17e2 <LCD_clearscreen+0xae>
    1808:	14 c0       	rjmp	.+40     	; 0x1832 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_clearscreen+0xf6>
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1832:	2e 96       	adiw	r28, 0x0e	; 14
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	61 97       	sbiw	r28, 0x11	; 17
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	88 8b       	std	Y+16, r24	; 0x10
    185a:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    185c:	88 89       	ldd	r24, Y+16	; 0x10
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	48 f4       	brcc	.+18     	; 0x1874 <LCD_movecursor+0x30>
    1862:	88 89       	ldd	r24, Y+16	; 0x10
    1864:	88 23       	and	r24, r24
    1866:	31 f0       	breq	.+12     	; 0x1874 <LCD_movecursor+0x30>
    1868:	89 89       	ldd	r24, Y+17	; 0x11
    186a:	81 31       	cpi	r24, 0x11	; 17
    186c:	18 f4       	brcc	.+6      	; 0x1874 <LCD_movecursor+0x30>
    186e:	89 89       	ldd	r24, Y+17	; 0x11
    1870:	88 23       	and	r24, r24
    1872:	19 f4       	brne	.+6      	; 0x187a <LCD_movecursor+0x36>
	{
		data=0x80;
    1874:	80 e8       	ldi	r24, 0x80	; 128
    1876:	8f 87       	std	Y+15, r24	; 0x0f
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <LCD_movecursor+0x50>
	}
	else if(row==1)
    187a:	88 89       	ldd	r24, Y+16	; 0x10
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	21 f4       	brne	.+8      	; 0x1888 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    1880:	89 89       	ldd	r24, Y+17	; 0x11
    1882:	81 58       	subi	r24, 0x81	; 129
    1884:	8f 87       	std	Y+15, r24	; 0x0f
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <LCD_movecursor+0x50>
	}
	else if (row==2)
    1888:	88 89       	ldd	r24, Y+16	; 0x10
    188a:	82 30       	cpi	r24, 0x02	; 2
    188c:	19 f4       	brne	.+6      	; 0x1894 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    188e:	89 89       	ldd	r24, Y+17	; 0x11
    1890:	81 54       	subi	r24, 0x41	; 65
    1892:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    1894:	8f 85       	ldd	r24, Y+15	; 0x0f
    1896:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_vSend_cmd>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e8       	ldi	r26, 0x80	; 128
    18a0:	bf e3       	ldi	r27, 0x3F	; 63
    18a2:	8b 87       	std	Y+11, r24	; 0x0b
    18a4:	9c 87       	std	Y+12, r25	; 0x0c
    18a6:	ad 87       	std	Y+13, r26	; 0x0d
    18a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a ef       	ldi	r20, 0xFA	; 250
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8f 83       	std	Y+7, r24	; 0x07
    18c4:	98 87       	std	Y+8, r25	; 0x08
    18c6:	a9 87       	std	Y+9, r26	; 0x09
    18c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ca:	6f 81       	ldd	r22, Y+7	; 0x07
    18cc:	78 85       	ldd	r23, Y+8	; 0x08
    18ce:	89 85       	ldd	r24, Y+9	; 0x09
    18d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <LCD_movecursor+0xa8>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    18ec:	6f 81       	ldd	r22, Y+7	; 0x07
    18ee:	78 85       	ldd	r23, Y+8	; 0x08
    18f0:	89 85       	ldd	r24, Y+9	; 0x09
    18f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	57 e4       	ldi	r21, 0x47	; 71
    18fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	4c f5       	brge	.+82     	; 0x1956 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	8d 85       	ldd	r24, Y+13	; 0x0d
    190a:	9e 85       	ldd	r25, Y+14	; 0x0e
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9e 83       	std	Y+6, r25	; 0x06
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	0f c0       	rjmp	.+30     	; 0x194c <LCD_movecursor+0x108>
    192e:	88 ec       	ldi	r24, 0xC8	; 200
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	8b 83       	std	Y+3, r24	; 0x03
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_movecursor+0xf6>
    193e:	9c 83       	std	Y+4, r25	; 0x04
    1940:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1942:	8d 81       	ldd	r24, Y+5	; 0x05
    1944:	9e 81       	ldd	r25, Y+6	; 0x06
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	9e 81       	ldd	r25, Y+6	; 0x06
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	69 f7       	brne	.-38     	; 0x192e <LCD_movecursor+0xea>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <LCD_movecursor+0x132>
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    197e:	61 96       	adiw	r28, 0x11	; 17
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <DIO_vsetPINDir>:


#include <avr/io.h>
#include "../LIB/std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <DIO_vsetPINDir+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <DIO_vsetPINDir+0x8>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	6a 83       	std	Y+2, r22	; 0x02
    19a2:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	3d 83       	std	Y+5, r19	; 0x05
    19ac:	2c 83       	std	Y+4, r18	; 0x04
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	82 34       	cpi	r24, 0x42	; 66
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <DIO_vsetPINDir+0x2a>
    19b8:	44 c0       	rjmp	.+136    	; 0x1a42 <DIO_vsetPINDir+0xb2>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	23 34       	cpi	r18, 0x43	; 67
    19c0:	31 05       	cpc	r19, r1
    19c2:	34 f4       	brge	.+12     	; 0x19d0 <DIO_vsetPINDir+0x40>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	81 34       	cpi	r24, 0x41	; 65
    19ca:	91 05       	cpc	r25, r1
    19cc:	71 f0       	breq	.+28     	; 0x19ea <DIO_vsetPINDir+0x5a>
    19ce:	bc c0       	rjmp	.+376    	; 0x1b48 <DIO_vsetPINDir+0x1b8>
    19d0:	2c 81       	ldd	r18, Y+4	; 0x04
    19d2:	3d 81       	ldd	r19, Y+5	; 0x05
    19d4:	23 34       	cpi	r18, 0x43	; 67
    19d6:	31 05       	cpc	r19, r1
    19d8:	09 f4       	brne	.+2      	; 0x19dc <DIO_vsetPINDir+0x4c>
    19da:	5f c0       	rjmp	.+190    	; 0x1a9a <DIO_vsetPINDir+0x10a>
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	84 34       	cpi	r24, 0x44	; 68
    19e2:	91 05       	cpc	r25, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <DIO_vsetPINDir+0x58>
    19e6:	85 c0       	rjmp	.+266    	; 0x1af2 <DIO_vsetPINDir+0x162>
    19e8:	af c0       	rjmp	.+350    	; 0x1b48 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	a1 f4       	brne	.+40     	; 0x1a18 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
    19f0:	aa e3       	ldi	r26, 0x3A	; 58
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ea e3       	ldi	r30, 0x3A	; 58
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	48 2f       	mov	r20, r24
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 2e       	mov	r0, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <DIO_vsetPINDir+0x7e>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	0a 94       	dec	r0
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <DIO_vsetPINDir+0x7a>
    1a12:	84 2b       	or	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	98 c0       	rjmp	.+304    	; 0x1b48 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
    1a18:	aa e3       	ldi	r26, 0x3A	; 58
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ea e3       	ldi	r30, 0x3A	; 58
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <DIO_vsetPINDir+0xa6>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <DIO_vsetPINDir+0xa2>
    1a3a:	80 95       	com	r24
    1a3c:	84 23       	and	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	83 c0       	rjmp	.+262    	; 0x1b48 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	a1 f4       	brne	.+40     	; 0x1a70 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
    1a48:	a7 e3       	ldi	r26, 0x37	; 55
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e7 e3       	ldi	r30, 0x37	; 55
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_vsetPINDir+0xd6>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_vsetPINDir+0xd2>
    1a6a:	84 2b       	or	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	6c c0       	rjmp	.+216    	; 0x1b48 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
    1a70:	a7 e3       	ldi	r26, 0x37	; 55
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e7 e3       	ldi	r30, 0x37	; 55
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_vsetPINDir+0xfe>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_vsetPINDir+0xfa>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	57 c0       	rjmp	.+174    	; 0x1b48 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	a1 f4       	brne	.+40     	; 0x1ac8 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
    1aa0:	a4 e3       	ldi	r26, 0x34	; 52
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e4 e3       	ldi	r30, 0x34	; 52
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <DIO_vsetPINDir+0x12e>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <DIO_vsetPINDir+0x12a>
    1ac2:	84 2b       	or	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	40 c0       	rjmp	.+128    	; 0x1b48 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
    1ac8:	a4 e3       	ldi	r26, 0x34	; 52
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e4 e3       	ldi	r30, 0x34	; 52
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_vsetPINDir+0x156>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <DIO_vsetPINDir+0x152>
    1aea:	80 95       	com	r24
    1aec:	84 23       	and	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	2b c0       	rjmp	.+86     	; 0x1b48 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	a1 f4       	brne	.+40     	; 0x1b20 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
    1af8:	a1 e3       	ldi	r26, 0x31	; 49
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e1 e3       	ldi	r30, 0x31	; 49
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_vsetPINDir+0x186>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_vsetPINDir+0x182>
    1b1a:	84 2b       	or	r24, r20
    1b1c:	8c 93       	st	X, r24
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
    1b20:	a1 e3       	ldi	r26, 0x31	; 49
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e1 e3       	ldi	r30, 0x31	; 49
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_vsetPINDir+0x1ae>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <DIO_vsetPINDir+0x1aa>
    1b42:	80 95       	com	r24
    1b44:	84 23       	and	r24, r20
    1b46:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <DIO_write+0x6>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <DIO_write+0x8>
    1b60:	0f 92       	push	r0
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	6a 83       	std	Y+2, r22	; 0x02
    1b6a:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3d 83       	std	Y+5, r19	; 0x05
    1b74:	2c 83       	std	Y+4, r18	; 0x04
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7a:	82 34       	cpi	r24, 0x42	; 66
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <DIO_write+0x2a>
    1b80:	44 c0       	rjmp	.+136    	; 0x1c0a <DIO_write+0xb2>
    1b82:	2c 81       	ldd	r18, Y+4	; 0x04
    1b84:	3d 81       	ldd	r19, Y+5	; 0x05
    1b86:	23 34       	cpi	r18, 0x43	; 67
    1b88:	31 05       	cpc	r19, r1
    1b8a:	34 f4       	brge	.+12     	; 0x1b98 <DIO_write+0x40>
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	81 34       	cpi	r24, 0x41	; 65
    1b92:	91 05       	cpc	r25, r1
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <DIO_write+0x5a>
    1b96:	bc c0       	rjmp	.+376    	; 0x1d10 <DIO_write+0x1b8>
    1b98:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9c:	23 34       	cpi	r18, 0x43	; 67
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <DIO_write+0x4c>
    1ba2:	5f c0       	rjmp	.+190    	; 0x1c62 <DIO_write+0x10a>
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	84 34       	cpi	r24, 0x44	; 68
    1baa:	91 05       	cpc	r25, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <DIO_write+0x58>
    1bae:	85 c0       	rjmp	.+266    	; 0x1cba <DIO_write+0x162>
    1bb0:	af c0       	rjmp	.+350    	; 0x1d10 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	a1 f4       	brne	.+40     	; 0x1be0 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    1bb8:	ab e3       	ldi	r26, 0x3B	; 59
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	eb e3       	ldi	r30, 0x3B	; 59
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <DIO_write+0x7e>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <DIO_write+0x7a>
    1bda:	84 2b       	or	r24, r20
    1bdc:	8c 93       	st	X, r24
    1bde:	98 c0       	rjmp	.+304    	; 0x1d10 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    1be0:	ab e3       	ldi	r26, 0x3B	; 59
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	eb e3       	ldi	r30, 0x3B	; 59
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <DIO_write+0xa6>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <DIO_write+0xa2>
    1c02:	80 95       	com	r24
    1c04:	84 23       	and	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	83 c0       	rjmp	.+262    	; 0x1d10 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	a1 f4       	brne	.+40     	; 0x1c38 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    1c10:	a8 e3       	ldi	r26, 0x38	; 56
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e8 e3       	ldi	r30, 0x38	; 56
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_write+0xd6>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_write+0xd2>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	6c c0       	rjmp	.+216    	; 0x1d10 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    1c38:	a8 e3       	ldi	r26, 0x38	; 56
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e8 e3       	ldi	r30, 0x38	; 56
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_write+0xfe>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_write+0xfa>
    1c5a:	80 95       	com	r24
    1c5c:	84 23       	and	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	57 c0       	rjmp	.+174    	; 0x1d10 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	a1 f4       	brne	.+40     	; 0x1c90 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    1c68:	a5 e3       	ldi	r26, 0x35	; 53
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e5 e3       	ldi	r30, 0x35	; 53
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_write+0x12e>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_write+0x12a>
    1c8a:	84 2b       	or	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	40 c0       	rjmp	.+128    	; 0x1d10 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    1c90:	a5 e3       	ldi	r26, 0x35	; 53
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e5 e3       	ldi	r30, 0x35	; 53
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	48 2f       	mov	r20, r24
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 2e       	mov	r0, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <DIO_write+0x156>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	0a 94       	dec	r0
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <DIO_write+0x152>
    1cb2:	80 95       	com	r24
    1cb4:	84 23       	and	r24, r20
    1cb6:	8c 93       	st	X, r24
    1cb8:	2b c0       	rjmp	.+86     	; 0x1d10 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	a1 f4       	brne	.+40     	; 0x1ce8 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    1cc0:	a2 e3       	ldi	r26, 0x32	; 50
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e2 e3       	ldi	r30, 0x32	; 50
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_write+0x186>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_write+0x182>
    1ce2:	84 2b       	or	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    1ce8:	a2 e3       	ldi	r26, 0x32	; 50
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e2 e3       	ldi	r30, 0x32	; 50
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <DIO_write+0x1ae>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <DIO_write+0x1aa>
    1d0a:	80 95       	com	r24
    1d0c:	84 23       	and	r24, r20
    1d0e:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <DIO_u8read+0x6>
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <DIO_u8read+0x8>
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	8a 83       	std	Y+2, r24	; 0x02
    1d30:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
    1d32:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3d 83       	std	Y+5, r19	; 0x05
    1d3c:	2c 83       	std	Y+4, r18	; 0x04
    1d3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d40:	5d 81       	ldd	r21, Y+5	; 0x05
    1d42:	42 34       	cpi	r20, 0x42	; 66
    1d44:	51 05       	cpc	r21, r1
    1d46:	b1 f1       	breq	.+108    	; 0x1db4 <DIO_u8read+0x94>
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	83 34       	cpi	r24, 0x43	; 67
    1d4e:	91 05       	cpc	r25, r1
    1d50:	34 f4       	brge	.+12     	; 0x1d5e <DIO_u8read+0x3e>
    1d52:	2c 81       	ldd	r18, Y+4	; 0x04
    1d54:	3d 81       	ldd	r19, Y+5	; 0x05
    1d56:	21 34       	cpi	r18, 0x41	; 65
    1d58:	31 05       	cpc	r19, r1
    1d5a:	71 f0       	breq	.+28     	; 0x1d78 <DIO_u8read+0x58>
    1d5c:	84 c0       	rjmp	.+264    	; 0x1e66 <DIO_u8read+0x146>
    1d5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d60:	5d 81       	ldd	r21, Y+5	; 0x05
    1d62:	43 34       	cpi	r20, 0x43	; 67
    1d64:	51 05       	cpc	r21, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <DIO_u8read+0x4a>
    1d68:	43 c0       	rjmp	.+134    	; 0x1df0 <DIO_u8read+0xd0>
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6e:	84 34       	cpi	r24, 0x44	; 68
    1d70:	91 05       	cpc	r25, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <DIO_u8read+0x56>
    1d74:	5b c0       	rjmp	.+182    	; 0x1e2c <DIO_u8read+0x10c>
    1d76:	77 c0       	rjmp	.+238    	; 0x1e66 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
    1d78:	e9 e3       	ldi	r30, 0x39	; 57
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_u8read+0x72>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	2a 95       	dec	r18
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_u8read+0x6e>
    1d96:	9a 01       	movw	r18, r20
    1d98:	28 23       	and	r18, r24
    1d9a:	39 23       	and	r19, r25
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a9 01       	movw	r20, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_u8read+0x8a>
    1da6:	55 95       	asr	r21
    1da8:	47 95       	ror	r20
    1daa:	8a 95       	dec	r24
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_u8read+0x86>
    1dae:	ca 01       	movw	r24, r20
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	59 c0       	rjmp	.+178    	; 0x1e66 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
    1db4:	e6 e3       	ldi	r30, 0x36	; 54
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_u8read+0xae>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	2a 95       	dec	r18
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <DIO_u8read+0xaa>
    1dd2:	9a 01       	movw	r18, r20
    1dd4:	28 23       	and	r18, r24
    1dd6:	39 23       	and	r19, r25
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a9 01       	movw	r20, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <DIO_u8read+0xc6>
    1de2:	55 95       	asr	r21
    1de4:	47 95       	ror	r20
    1de6:	8a 95       	dec	r24
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <DIO_u8read+0xc2>
    1dea:	ca 01       	movw	r24, r20
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	3b c0       	rjmp	.+118    	; 0x1e66 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
    1df0:	e3 e3       	ldi	r30, 0x33	; 51
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_u8read+0xea>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	2a 95       	dec	r18
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_u8read+0xe6>
    1e0e:	9a 01       	movw	r18, r20
    1e10:	28 23       	and	r18, r24
    1e12:	39 23       	and	r19, r25
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a9 01       	movw	r20, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_u8read+0x102>
    1e1e:	55 95       	asr	r21
    1e20:	47 95       	ror	r20
    1e22:	8a 95       	dec	r24
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_u8read+0xfe>
    1e26:	ca 01       	movw	r24, r20
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	1d c0       	rjmp	.+58     	; 0x1e66 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
    1e2c:	e0 e3       	ldi	r30, 0x30	; 48
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_u8read+0x126>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	2a 95       	dec	r18
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_u8read+0x122>
    1e4a:	9a 01       	movw	r18, r20
    1e4c:	28 23       	and	r18, r24
    1e4e:	39 23       	and	r19, r25
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a9 01       	movw	r20, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <DIO_u8read+0x13e>
    1e5a:	55 95       	asr	r21
    1e5c:	47 95       	ror	r20
    1e5e:	8a 95       	dec	r24
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <DIO_u8read+0x13a>
    1e62:	ca 01       	movw	r24, r20
    1e64:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <DIO_toggle+0x6>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <DIO_toggle+0x8>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3c 83       	std	Y+4, r19	; 0x04
    1e90:	2b 83       	std	Y+3, r18	; 0x03
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	82 34       	cpi	r24, 0x42	; 66
    1e98:	91 05       	cpc	r25, r1
    1e9a:	51 f1       	breq	.+84     	; 0x1ef0 <DIO_toggle+0x78>
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	23 34       	cpi	r18, 0x43	; 67
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	34 f4       	brge	.+12     	; 0x1eb2 <DIO_toggle+0x3a>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	81 34       	cpi	r24, 0x41	; 65
    1eac:	91 05       	cpc	r25, r1
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <DIO_toggle+0x50>
    1eb0:	5a c0       	rjmp	.+180    	; 0x1f66 <DIO_toggle+0xee>
    1eb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb6:	23 34       	cpi	r18, 0x43	; 67
    1eb8:	31 05       	cpc	r19, r1
    1eba:	71 f1       	breq	.+92     	; 0x1f18 <DIO_toggle+0xa0>
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	84 34       	cpi	r24, 0x44	; 68
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	e9 f1       	breq	.+122    	; 0x1f40 <DIO_toggle+0xc8>
    1ec6:	4f c0       	rjmp	.+158    	; 0x1f66 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    1ec8:	ab e3       	ldi	r26, 0x3B	; 59
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	eb e3       	ldi	r30, 0x3B	; 59
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 2e       	mov	r0, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_toggle+0x6e>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_toggle+0x6a>
    1eea:	84 27       	eor	r24, r20
    1eec:	8c 93       	st	X, r24
    1eee:	3b c0       	rjmp	.+118    	; 0x1f66 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    1ef0:	a8 e3       	ldi	r26, 0x38	; 56
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e8 e3       	ldi	r30, 0x38	; 56
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	48 2f       	mov	r20, r24
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	02 2e       	mov	r0, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_toggle+0x96>
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	0a 94       	dec	r0
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_toggle+0x92>
    1f12:	84 27       	eor	r24, r20
    1f14:	8c 93       	st	X, r24
    1f16:	27 c0       	rjmp	.+78     	; 0x1f66 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1f18:	a5 e3       	ldi	r26, 0x35	; 53
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e5 e3       	ldi	r30, 0x35	; 53
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	48 2f       	mov	r20, r24
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <DIO_toggle+0xbe>
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <DIO_toggle+0xba>
    1f3a:	84 27       	eor	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	13 c0       	rjmp	.+38     	; 0x1f66 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    1f40:	a2 e3       	ldi	r26, 0x32	; 50
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e2 e3       	ldi	r30, 0x32	; 50
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <DIO_toggle+0xe6>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <DIO_toggle+0xe2>
    1f62:	84 27       	eor	r24, r20
    1f64:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <DIO_set_port_direction+0x6>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <DIO_set_port_direction+0x8>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	3c 83       	std	Y+4, r19	; 0x04
    1f8c:	2b 83       	std	Y+3, r18	; 0x03
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	82 34       	cpi	r24, 0x42	; 66
    1f94:	91 05       	cpc	r25, r1
    1f96:	d9 f0       	breq	.+54     	; 0x1fce <DIO_set_port_direction+0x5a>
    1f98:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9c:	23 34       	cpi	r18, 0x43	; 67
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	34 f4       	brge	.+12     	; 0x1fae <DIO_set_port_direction+0x3a>
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	81 34       	cpi	r24, 0x41	; 65
    1fa8:	91 05       	cpc	r25, r1
    1faa:	61 f0       	breq	.+24     	; 0x1fc4 <DIO_set_port_direction+0x50>
    1fac:	1e c0       	rjmp	.+60     	; 0x1fea <DIO_set_port_direction+0x76>
    1fae:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb2:	23 34       	cpi	r18, 0x43	; 67
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	81 f0       	breq	.+32     	; 0x1fd8 <DIO_set_port_direction+0x64>
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	84 34       	cpi	r24, 0x44	; 68
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	81 f0       	breq	.+32     	; 0x1fe2 <DIO_set_port_direction+0x6e>
    1fc2:	13 c0       	rjmp	.+38     	; 0x1fea <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    1fc4:	ea e3       	ldi	r30, 0x3A	; 58
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	80 83       	st	Z, r24
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    1fce:	e7 e3       	ldi	r30, 0x37	; 55
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	80 83       	st	Z, r24
    1fd6:	09 c0       	rjmp	.+18     	; 0x1fea <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    1fd8:	e4 e3       	ldi	r30, 0x34	; 52
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	80 83       	st	Z, r24
    1fe0:	04 c0       	rjmp	.+8      	; 0x1fea <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    1fe2:	e1 e3       	ldi	r30, 0x31	; 49
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <DIO_write_port+0x6>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <DIO_write_port+0x8>
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	3c 83       	std	Y+4, r19	; 0x04
    2010:	2b 83       	std	Y+3, r18	; 0x03
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	82 34       	cpi	r24, 0x42	; 66
    2018:	91 05       	cpc	r25, r1
    201a:	d9 f0       	breq	.+54     	; 0x2052 <DIO_write_port+0x5a>
    201c:	2b 81       	ldd	r18, Y+3	; 0x03
    201e:	3c 81       	ldd	r19, Y+4	; 0x04
    2020:	23 34       	cpi	r18, 0x43	; 67
    2022:	31 05       	cpc	r19, r1
    2024:	34 f4       	brge	.+12     	; 0x2032 <DIO_write_port+0x3a>
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	81 34       	cpi	r24, 0x41	; 65
    202c:	91 05       	cpc	r25, r1
    202e:	61 f0       	breq	.+24     	; 0x2048 <DIO_write_port+0x50>
    2030:	1e c0       	rjmp	.+60     	; 0x206e <DIO_write_port+0x76>
    2032:	2b 81       	ldd	r18, Y+3	; 0x03
    2034:	3c 81       	ldd	r19, Y+4	; 0x04
    2036:	23 34       	cpi	r18, 0x43	; 67
    2038:	31 05       	cpc	r19, r1
    203a:	81 f0       	breq	.+32     	; 0x205c <DIO_write_port+0x64>
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	84 34       	cpi	r24, 0x44	; 68
    2042:	91 05       	cpc	r25, r1
    2044:	81 f0       	breq	.+32     	; 0x2066 <DIO_write_port+0x6e>
    2046:	13 c0       	rjmp	.+38     	; 0x206e <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    2048:	eb e3       	ldi	r30, 0x3B	; 59
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	80 83       	st	Z, r24
    2050:	0e c0       	rjmp	.+28     	; 0x206e <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    2052:	e8 e3       	ldi	r30, 0x38	; 56
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	80 83       	st	Z, r24
    205a:	09 c0       	rjmp	.+18     	; 0x206e <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    205c:	e5 e3       	ldi	r30, 0x35	; 53
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	80 83       	st	Z, r24
    2064:	04 c0       	rjmp	.+8      	; 0x206e <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    2066:	e2 e3       	ldi	r30, 0x32	; 50
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	00 d0       	rcall	.+0      	; 0x2082 <DIO_read_port+0x6>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <DIO_read_port+0x8>
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    208a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	3c 83       	std	Y+4, r19	; 0x04
    2094:	2b 83       	std	Y+3, r18	; 0x03
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	82 34       	cpi	r24, 0x42	; 66
    209c:	91 05       	cpc	r25, r1
    209e:	d9 f0       	breq	.+54     	; 0x20d6 <DIO_read_port+0x5a>
    20a0:	2b 81       	ldd	r18, Y+3	; 0x03
    20a2:	3c 81       	ldd	r19, Y+4	; 0x04
    20a4:	23 34       	cpi	r18, 0x43	; 67
    20a6:	31 05       	cpc	r19, r1
    20a8:	34 f4       	brge	.+12     	; 0x20b6 <DIO_read_port+0x3a>
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	81 34       	cpi	r24, 0x41	; 65
    20b0:	91 05       	cpc	r25, r1
    20b2:	61 f0       	breq	.+24     	; 0x20cc <DIO_read_port+0x50>
    20b4:	1e c0       	rjmp	.+60     	; 0x20f2 <DIO_read_port+0x76>
    20b6:	2b 81       	ldd	r18, Y+3	; 0x03
    20b8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ba:	23 34       	cpi	r18, 0x43	; 67
    20bc:	31 05       	cpc	r19, r1
    20be:	81 f0       	breq	.+32     	; 0x20e0 <DIO_read_port+0x64>
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	84 34       	cpi	r24, 0x44	; 68
    20c6:	91 05       	cpc	r25, r1
    20c8:	81 f0       	breq	.+32     	; 0x20ea <DIO_read_port+0x6e>
    20ca:	13 c0       	rjmp	.+38     	; 0x20f2 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    20cc:	e9 e3       	ldi	r30, 0x39	; 57
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	0e c0       	rjmp	.+28     	; 0x20f2 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    20d6:	e6 e3       	ldi	r30, 0x36	; 54
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	09 c0       	rjmp	.+18     	; 0x20f2 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    20e0:	e3 e3       	ldi	r30, 0x33	; 51
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    20ea:	e0 e3       	ldi	r30, 0x30	; 48
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <DIO_vconnectpullup+0x6>
    2108:	00 d0       	rcall	.+0      	; 0x210a <DIO_vconnectpullup+0x8>
    210a:	0f 92       	push	r0
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	6a 83       	std	Y+2, r22	; 0x02
    2114:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	3d 83       	std	Y+5, r19	; 0x05
    211e:	2c 83       	std	Y+4, r18	; 0x04
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	82 34       	cpi	r24, 0x42	; 66
    2126:	91 05       	cpc	r25, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <DIO_vconnectpullup+0x2a>
    212a:	44 c0       	rjmp	.+136    	; 0x21b4 <DIO_vconnectpullup+0xb2>
    212c:	2c 81       	ldd	r18, Y+4	; 0x04
    212e:	3d 81       	ldd	r19, Y+5	; 0x05
    2130:	23 34       	cpi	r18, 0x43	; 67
    2132:	31 05       	cpc	r19, r1
    2134:	34 f4       	brge	.+12     	; 0x2142 <DIO_vconnectpullup+0x40>
    2136:	8c 81       	ldd	r24, Y+4	; 0x04
    2138:	9d 81       	ldd	r25, Y+5	; 0x05
    213a:	81 34       	cpi	r24, 0x41	; 65
    213c:	91 05       	cpc	r25, r1
    213e:	71 f0       	breq	.+28     	; 0x215c <DIO_vconnectpullup+0x5a>
    2140:	bc c0       	rjmp	.+376    	; 0x22ba <DIO_vconnectpullup+0x1b8>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	23 34       	cpi	r18, 0x43	; 67
    2148:	31 05       	cpc	r19, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <DIO_vconnectpullup+0x4c>
    214c:	5f c0       	rjmp	.+190    	; 0x220c <DIO_vconnectpullup+0x10a>
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	84 34       	cpi	r24, 0x44	; 68
    2154:	91 05       	cpc	r25, r1
    2156:	09 f4       	brne	.+2      	; 0x215a <DIO_vconnectpullup+0x58>
    2158:	85 c0       	rjmp	.+266    	; 0x2264 <DIO_vconnectpullup+0x162>
    215a:	af c0       	rjmp	.+350    	; 0x22ba <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	a1 f4       	brne	.+40     	; 0x218a <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    2162:	ab e3       	ldi	r26, 0x3B	; 59
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	eb e3       	ldi	r30, 0x3B	; 59
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	48 2f       	mov	r20, r24
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 2e       	mov	r0, r18
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <DIO_vconnectpullup+0x7e>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <DIO_vconnectpullup+0x7a>
    2184:	84 2b       	or	r24, r20
    2186:	8c 93       	st	X, r24
    2188:	98 c0       	rjmp	.+304    	; 0x22ba <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    218a:	ab e3       	ldi	r26, 0x3B	; 59
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	eb e3       	ldi	r30, 0x3B	; 59
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	48 2f       	mov	r20, r24
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	02 2e       	mov	r0, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <DIO_vconnectpullup+0xa6>
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	0a 94       	dec	r0
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <DIO_vconnectpullup+0xa2>
    21ac:	80 95       	com	r24
    21ae:	84 23       	and	r24, r20
    21b0:	8c 93       	st	X, r24
    21b2:	83 c0       	rjmp	.+262    	; 0x22ba <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	a1 f4       	brne	.+40     	; 0x21e2 <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    21ba:	a8 e3       	ldi	r26, 0x38	; 56
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e8 e3       	ldi	r30, 0x38	; 56
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <DIO_vconnectpullup+0xd6>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <DIO_vconnectpullup+0xd2>
    21dc:	84 2b       	or	r24, r20
    21de:	8c 93       	st	X, r24
    21e0:	6c c0       	rjmp	.+216    	; 0x22ba <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    21e2:	a8 e3       	ldi	r26, 0x38	; 56
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e8 e3       	ldi	r30, 0x38	; 56
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	48 2f       	mov	r20, r24
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	02 2e       	mov	r0, r18
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <DIO_vconnectpullup+0xfe>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <DIO_vconnectpullup+0xfa>
    2204:	80 95       	com	r24
    2206:	84 23       	and	r24, r20
    2208:	8c 93       	st	X, r24
    220a:	57 c0       	rjmp	.+174    	; 0x22ba <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	a1 f4       	brne	.+40     	; 0x223a <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    2212:	a5 e3       	ldi	r26, 0x35	; 53
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e3       	ldi	r30, 0x35	; 53
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <DIO_vconnectpullup+0x12e>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <DIO_vconnectpullup+0x12a>
    2234:	84 2b       	or	r24, r20
    2236:	8c 93       	st	X, r24
    2238:	40 c0       	rjmp	.+128    	; 0x22ba <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    223a:	a5 e3       	ldi	r26, 0x35	; 53
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e5 e3       	ldi	r30, 0x35	; 53
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	48 2f       	mov	r20, r24
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 2e       	mov	r0, r18
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <DIO_vconnectpullup+0x156>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	0a 94       	dec	r0
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <DIO_vconnectpullup+0x152>
    225c:	80 95       	com	r24
    225e:	84 23       	and	r24, r20
    2260:	8c 93       	st	X, r24
    2262:	2b c0       	rjmp	.+86     	; 0x22ba <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	a1 f4       	brne	.+40     	; 0x2292 <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    226a:	a2 e3       	ldi	r26, 0x32	; 50
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e2 e3       	ldi	r30, 0x32	; 50
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	48 2f       	mov	r20, r24
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	02 2e       	mov	r0, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <DIO_vconnectpullup+0x186>
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	0a 94       	dec	r0
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <DIO_vconnectpullup+0x182>
    228c:	84 2b       	or	r24, r20
    228e:	8c 93       	st	X, r24
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    2292:	a2 e3       	ldi	r26, 0x32	; 50
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e2 e3       	ldi	r30, 0x32	; 50
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	02 2e       	mov	r0, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <DIO_vconnectpullup+0x1ae>
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	0a 94       	dec	r0
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <DIO_vconnectpullup+0x1aa>
    22b4:	80 95       	com	r24
    22b6:	84 23       	and	r24, r20
    22b8:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <write_low_nibble+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <write_low_nibble+0x8>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	8f 70       	andi	r24, 0x0F	; 15
    22de:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	3c 83       	std	Y+4, r19	; 0x04
    22e8:	2b 83       	std	Y+3, r18	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	82 34       	cpi	r24, 0x42	; 66
    22f0:	91 05       	cpc	r25, r1
    22f2:	31 f1       	breq	.+76     	; 0x2340 <write_low_nibble+0x76>
    22f4:	2b 81       	ldd	r18, Y+3	; 0x03
    22f6:	3c 81       	ldd	r19, Y+4	; 0x04
    22f8:	23 34       	cpi	r18, 0x43	; 67
    22fa:	31 05       	cpc	r19, r1
    22fc:	34 f4       	brge	.+12     	; 0x230a <write_low_nibble+0x40>
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	81 34       	cpi	r24, 0x41	; 65
    2304:	91 05       	cpc	r25, r1
    2306:	61 f0       	breq	.+24     	; 0x2320 <write_low_nibble+0x56>
    2308:	4a c0       	rjmp	.+148    	; 0x239e <write_low_nibble+0xd4>
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	23 34       	cpi	r18, 0x43	; 67
    2310:	31 05       	cpc	r19, r1
    2312:	31 f1       	breq	.+76     	; 0x2360 <write_low_nibble+0x96>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	84 34       	cpi	r24, 0x44	; 68
    231a:	91 05       	cpc	r25, r1
    231c:	89 f1       	breq	.+98     	; 0x2380 <write_low_nibble+0xb6>
    231e:	3f c0       	rjmp	.+126    	; 0x239e <write_low_nibble+0xd4>
	{
		case 'A':
		PORTA&=0xf0;
    2320:	ab e3       	ldi	r26, 0x3B	; 59
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	eb e3       	ldi	r30, 0x3B	; 59
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	80 7f       	andi	r24, 0xF0	; 240
    232c:	8c 93       	st	X, r24
		PORTA|=value;
    232e:	ab e3       	ldi	r26, 0x3B	; 59
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	eb e3       	ldi	r30, 0x3B	; 59
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	90 81       	ld	r25, Z
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	89 2b       	or	r24, r25
    233c:	8c 93       	st	X, r24
    233e:	2f c0       	rjmp	.+94     	; 0x239e <write_low_nibble+0xd4>
		break;

		case 'B':
		PORTB&=0xf0;
    2340:	a8 e3       	ldi	r26, 0x38	; 56
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e8 e3       	ldi	r30, 0x38	; 56
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	80 7f       	andi	r24, 0xF0	; 240
    234c:	8c 93       	st	X, r24
		PORTB|=value;
    234e:	a8 e3       	ldi	r26, 0x38	; 56
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e8 e3       	ldi	r30, 0x38	; 56
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	90 81       	ld	r25, Z
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	89 2b       	or	r24, r25
    235c:	8c 93       	st	X, r24
    235e:	1f c0       	rjmp	.+62     	; 0x239e <write_low_nibble+0xd4>
		break;

		case 'C':
		PORTC&=0xf0;
    2360:	a5 e3       	ldi	r26, 0x35	; 53
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e5 e3       	ldi	r30, 0x35	; 53
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	80 7f       	andi	r24, 0xF0	; 240
    236c:	8c 93       	st	X, r24
		PORTC|=value;
    236e:	a5 e3       	ldi	r26, 0x35	; 53
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e3       	ldi	r30, 0x35	; 53
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	90 81       	ld	r25, Z
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	89 2b       	or	r24, r25
    237c:	8c 93       	st	X, r24
    237e:	0f c0       	rjmp	.+30     	; 0x239e <write_low_nibble+0xd4>
		break;

		case 'D':
		PORTD&=0xf0;
    2380:	a2 e3       	ldi	r26, 0x32	; 50
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e2 e3       	ldi	r30, 0x32	; 50
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	80 7f       	andi	r24, 0xF0	; 240
    238c:	8c 93       	st	X, r24
		PORTD|=value;
    238e:	a2 e3       	ldi	r26, 0x32	; 50
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e2 e3       	ldi	r30, 0x32	; 50
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	90 81       	ld	r25, Z
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	89 2b       	or	r24, r25
    239c:	8c 93       	st	X, r24
		break;

	}
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <write_high_nibble+0x6>
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <write_high_nibble+0x8>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	82 95       	swap	r24
    23c0:	80 7f       	andi	r24, 0xF0	; 240
    23c2:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	3c 83       	std	Y+4, r19	; 0x04
    23cc:	2b 83       	std	Y+3, r18	; 0x03
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	82 34       	cpi	r24, 0x42	; 66
    23d4:	91 05       	cpc	r25, r1
    23d6:	31 f1       	breq	.+76     	; 0x2424 <write_high_nibble+0x78>
    23d8:	2b 81       	ldd	r18, Y+3	; 0x03
    23da:	3c 81       	ldd	r19, Y+4	; 0x04
    23dc:	23 34       	cpi	r18, 0x43	; 67
    23de:	31 05       	cpc	r19, r1
    23e0:	34 f4       	brge	.+12     	; 0x23ee <write_high_nibble+0x42>
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	81 34       	cpi	r24, 0x41	; 65
    23e8:	91 05       	cpc	r25, r1
    23ea:	61 f0       	breq	.+24     	; 0x2404 <write_high_nibble+0x58>
    23ec:	4a c0       	rjmp	.+148    	; 0x2482 <write_high_nibble+0xd6>
    23ee:	2b 81       	ldd	r18, Y+3	; 0x03
    23f0:	3c 81       	ldd	r19, Y+4	; 0x04
    23f2:	23 34       	cpi	r18, 0x43	; 67
    23f4:	31 05       	cpc	r19, r1
    23f6:	31 f1       	breq	.+76     	; 0x2444 <write_high_nibble+0x98>
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	84 34       	cpi	r24, 0x44	; 68
    23fe:	91 05       	cpc	r25, r1
    2400:	89 f1       	breq	.+98     	; 0x2464 <write_high_nibble+0xb8>
    2402:	3f c0       	rjmp	.+126    	; 0x2482 <write_high_nibble+0xd6>
	{
		case 'A':
		PORTA&=0x0f;
    2404:	ab e3       	ldi	r26, 0x3B	; 59
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	eb e3       	ldi	r30, 0x3B	; 59
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	8f 70       	andi	r24, 0x0F	; 15
    2410:	8c 93       	st	X, r24
		PORTA|=value;
    2412:	ab e3       	ldi	r26, 0x3B	; 59
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	eb e3       	ldi	r30, 0x3B	; 59
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	90 81       	ld	r25, Z
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	89 2b       	or	r24, r25
    2420:	8c 93       	st	X, r24
    2422:	2f c0       	rjmp	.+94     	; 0x2482 <write_high_nibble+0xd6>
		break;

		case 'B':
		PORTB&=0x0f;
    2424:	a8 e3       	ldi	r26, 0x38	; 56
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e8 e3       	ldi	r30, 0x38	; 56
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8f 70       	andi	r24, 0x0F	; 15
    2430:	8c 93       	st	X, r24
		PORTB|=value;
    2432:	a8 e3       	ldi	r26, 0x38	; 56
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e8 e3       	ldi	r30, 0x38	; 56
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	90 81       	ld	r25, Z
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	89 2b       	or	r24, r25
    2440:	8c 93       	st	X, r24
    2442:	1f c0       	rjmp	.+62     	; 0x2482 <write_high_nibble+0xd6>
		break;

		case 'C':
		PORTC&=0x0f;
    2444:	a5 e3       	ldi	r26, 0x35	; 53
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e5 e3       	ldi	r30, 0x35	; 53
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8f 70       	andi	r24, 0x0F	; 15
    2450:	8c 93       	st	X, r24
		PORTC|=value;
    2452:	a5 e3       	ldi	r26, 0x35	; 53
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e5 e3       	ldi	r30, 0x35	; 53
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	90 81       	ld	r25, Z
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	89 2b       	or	r24, r25
    2460:	8c 93       	st	X, r24
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <write_high_nibble+0xd6>
		break;

		case 'D':
		PORTD&=0x0f;
    2464:	a2 e3       	ldi	r26, 0x32	; 50
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e2 e3       	ldi	r30, 0x32	; 50
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	8f 70       	andi	r24, 0x0F	; 15
    2470:	8c 93       	st	X, r24
		PORTD|=value;
    2472:	a2 e3       	ldi	r26, 0x32	; 50
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e2 e3       	ldi	r30, 0x32	; 50
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	90 81       	ld	r25, Z
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	89 2b       	or	r24, r25
    2480:	8c 93       	st	X, r24
		break;

	}
}
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <main>:
volatile u8 counter1=0;
volatile u8 counter_green=10;
volatile u8 counter_yellow=5;
volatile u8 counter_red=7;
int main(void)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	aa 97       	sbiw	r28, 0x2a	; 42
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
	LED_vInit('D',0);
    24a4:	84 e4       	ldi	r24, 0x44	; 68
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LED_vInit>
	LED_vInit('D',1);
    24ac:	84 e4       	ldi	r24, 0x44	; 68
    24ae:	61 e0       	ldi	r22, 0x01	; 1
    24b0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LED_vInit>
	LED_vInit('D',2);
    24b4:	84 e4       	ldi	r24, 0x44	; 68
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LED_vInit>
	LCD_vInit();
    24bc:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LCD_vInit>
	timer_CTC_init_interrupt();
    24c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <timer_CTC_init_interrupt>
	
    while(1)
    {
		counter_green=10;
    24c4:	8a e0       	ldi	r24, 0x0A	; 10
    24c6:	80 93 9b 00 	sts	0x009B, r24
		counter_yellow=5;
    24ca:	85 e0       	ldi	r24, 0x05	; 5
    24cc:	80 93 9c 00 	sts	0x009C, r24
		counter_red=7;
    24d0:	87 e0       	ldi	r24, 0x07	; 7
    24d2:	80 93 9d 00 	sts	0x009D, r24
		LCD_clearscreen();
    24d6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_clearscreen>
		LCD_vSend_string("remaining 10 sec");
    24da:	80 e6       	ldi	r24, 0x60	; 96
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_vSend_string>
		LED_vTurnOn('D',0);
    24e2:	84 e4       	ldi	r24, 0x44	; 68
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LED_vTurnOn>
    24ea:	1c c0       	rjmp	.+56     	; 0x2524 <main+0x94>
		while(counter_green>0)
		{
			if(counter1>=100)
    24ec:	80 91 9e 00 	lds	r24, 0x009E
    24f0:	84 36       	cpi	r24, 0x64	; 100
    24f2:	c0 f0       	brcs	.+48     	; 0x2524 <main+0x94>
			{
				counter1=0;
    24f4:	10 92 9e 00 	sts	0x009E, r1
				counter_green--;
    24f8:	80 91 9b 00 	lds	r24, 0x009B
    24fc:	81 50       	subi	r24, 0x01	; 1
    24fe:	80 93 9b 00 	sts	0x009B, r24
				LCD_movecursor(1,11);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	6b e0       	ldi	r22, 0x0B	; 11
    2506:	0e 94 22 0c 	call	0x1844	; 0x1844 <LCD_movecursor>
				LCD_vSend_char(' ');
    250a:	80 e2       	ldi	r24, 0x20	; 32
    250c:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_vSend_char>
				LCD_vSend_char((counter_green%10)+48);
    2510:	80 91 9b 00 	lds	r24, 0x009B
    2514:	9a e0       	ldi	r25, 0x0A	; 10
    2516:	69 2f       	mov	r22, r25
    2518:	0e 94 66 14 	call	0x28cc	; 0x28cc <__udivmodqi4>
    251c:	89 2f       	mov	r24, r25
    251e:	80 5d       	subi	r24, 0xD0	; 208
    2520:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_vSend_char>
		counter_yellow=5;
		counter_red=7;
		LCD_clearscreen();
		LCD_vSend_string("remaining 10 sec");
		LED_vTurnOn('D',0);
		while(counter_green>0)
    2524:	80 91 9b 00 	lds	r24, 0x009B
    2528:	88 23       	and	r24, r24
    252a:	01 f7       	brne	.-64     	; 0x24ec <main+0x5c>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	aa ef       	ldi	r26, 0xFA	; 250
    2532:	b3 e4       	ldi	r27, 0x43	; 67
    2534:	8f a3       	std	Y+39, r24	; 0x27
    2536:	98 a7       	std	Y+40, r25	; 0x28
    2538:	a9 a7       	std	Y+41, r26	; 0x29
    253a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	6f a1       	ldd	r22, Y+39	; 0x27
    253e:	78 a5       	ldd	r23, Y+40	; 0x28
    2540:	89 a5       	ldd	r24, Y+41	; 0x29
    2542:	9a a5       	ldd	r25, Y+42	; 0x2a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a ef       	ldi	r20, 0xFA	; 250
    254a:	54 e4       	ldi	r21, 0x44	; 68
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8b a3       	std	Y+35, r24	; 0x23
    2556:	9c a3       	std	Y+36, r25	; 0x24
    2558:	ad a3       	std	Y+37, r26	; 0x25
    255a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    255c:	6b a1       	ldd	r22, Y+35	; 0x23
    255e:	7c a1       	ldd	r23, Y+36	; 0x24
    2560:	8d a1       	ldd	r24, Y+37	; 0x25
    2562:	9e a1       	ldd	r25, Y+38	; 0x26
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <main+0xee>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9a a3       	std	Y+34, r25	; 0x22
    257a:	89 a3       	std	Y+33, r24	; 0x21
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <main+0x16c>
	else if (__tmp > 65535)
    257e:	6b a1       	ldd	r22, Y+35	; 0x23
    2580:	7c a1       	ldd	r23, Y+36	; 0x24
    2582:	8d a1       	ldd	r24, Y+37	; 0x25
    2584:	9e a1       	ldd	r25, Y+38	; 0x26
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	6f a1       	ldd	r22, Y+39	; 0x27
    2598:	78 a5       	ldd	r23, Y+40	; 0x28
    259a:	89 a5       	ldd	r24, Y+41	; 0x29
    259c:	9a a5       	ldd	r25, Y+42	; 0x2a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9a a3       	std	Y+34, r25	; 0x22
    25bc:	89 a3       	std	Y+33, r24	; 0x21
    25be:	0f c0       	rjmp	.+30     	; 0x25de <main+0x14e>
    25c0:	88 ec       	ldi	r24, 0xC8	; 200
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	98 a3       	std	Y+32, r25	; 0x20
    25c6:	8f 8f       	std	Y+31, r24	; 0x1f
    25c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ca:	98 a1       	ldd	r25, Y+32	; 0x20
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <main+0x13c>
    25d0:	98 a3       	std	Y+32, r25	; 0x20
    25d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	89 a1       	ldd	r24, Y+33	; 0x21
    25d6:	9a a1       	ldd	r25, Y+34	; 0x22
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9a a3       	std	Y+34, r25	; 0x22
    25dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	89 a1       	ldd	r24, Y+33	; 0x21
    25e0:	9a a1       	ldd	r25, Y+34	; 0x22
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <main+0x130>
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ea:	7c a1       	ldd	r23, Y+36	; 0x24
    25ec:	8d a1       	ldd	r24, Y+37	; 0x25
    25ee:	9e a1       	ldd	r25, Y+38	; 0x26
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9a a3       	std	Y+34, r25	; 0x22
    25fa:	89 a3       	std	Y+33, r24	; 0x21
    25fc:	89 a1       	ldd	r24, Y+33	; 0x21
    25fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2600:	9e 8f       	std	Y+30, r25	; 0x1e
    2602:	8d 8f       	std	Y+29, r24	; 0x1d
    2604:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2606:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <main+0x178>
    260c:	9e 8f       	std	Y+30, r25	; 0x1e
    260e:	8d 8f       	std	Y+29, r24	; 0x1d
				LCD_vSend_char(' ');
				LCD_vSend_char((counter_green%10)+48);
			}
		}
		_delay_ms(500);
		LED_vTurnOn('D',1);
    2610:	84 e4       	ldi	r24, 0x44	; 68
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LED_vTurnOn>
		LED_vTurnOff('D',0);
    2618:	84 e4       	ldi	r24, 0x44	; 68
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	0e 94 8c 06 	call	0xd18	; 0xd18 <LED_vTurnOff>
		LCD_clearscreen();
    2620:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_clearscreen>
		LCD_vSend_string("remaining  5 sec");
    2624:	81 e7       	ldi	r24, 0x71	; 113
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_vSend_string>
    262c:	1c c0       	rjmp	.+56     	; 0x2666 <main+0x1d6>
		while(counter_yellow>0)
		{
			if(counter1>=100)
    262e:	80 91 9e 00 	lds	r24, 0x009E
    2632:	84 36       	cpi	r24, 0x64	; 100
    2634:	c0 f0       	brcs	.+48     	; 0x2666 <main+0x1d6>
			{
				counter1=0;
    2636:	10 92 9e 00 	sts	0x009E, r1
				counter_yellow--;
    263a:	80 91 9c 00 	lds	r24, 0x009C
    263e:	81 50       	subi	r24, 0x01	; 1
    2640:	80 93 9c 00 	sts	0x009C, r24
				LCD_movecursor(1,11);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	6b e0       	ldi	r22, 0x0B	; 11
    2648:	0e 94 22 0c 	call	0x1844	; 0x1844 <LCD_movecursor>
				LCD_vSend_char(' ');
    264c:	80 e2       	ldi	r24, 0x20	; 32
    264e:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_vSend_char>
				LCD_vSend_char((counter_yellow%10)+48);
    2652:	80 91 9c 00 	lds	r24, 0x009C
    2656:	9a e0       	ldi	r25, 0x0A	; 10
    2658:	69 2f       	mov	r22, r25
    265a:	0e 94 66 14 	call	0x28cc	; 0x28cc <__udivmodqi4>
    265e:	89 2f       	mov	r24, r25
    2660:	80 5d       	subi	r24, 0xD0	; 208
    2662:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_vSend_char>
		_delay_ms(500);
		LED_vTurnOn('D',1);
		LED_vTurnOff('D',0);
		LCD_clearscreen();
		LCD_vSend_string("remaining  5 sec");
		while(counter_yellow>0)
    2666:	80 91 9c 00 	lds	r24, 0x009C
    266a:	88 23       	and	r24, r24
    266c:	01 f7       	brne	.-64     	; 0x262e <main+0x19e>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	aa ef       	ldi	r26, 0xFA	; 250
    2674:	b3 e4       	ldi	r27, 0x43	; 67
    2676:	89 8f       	std	Y+25, r24	; 0x19
    2678:	9a 8f       	std	Y+26, r25	; 0x1a
    267a:	ab 8f       	std	Y+27, r26	; 0x1b
    267c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	69 8d       	ldd	r22, Y+25	; 0x19
    2680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8d 8b       	std	Y+21, r24	; 0x15
    2698:	9e 8b       	std	Y+22, r25	; 0x16
    269a:	af 8b       	std	Y+23, r26	; 0x17
    269c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269e:	6d 89       	ldd	r22, Y+21	; 0x15
    26a0:	7e 89       	ldd	r23, Y+22	; 0x16
    26a2:	8f 89       	ldd	r24, Y+23	; 0x17
    26a4:	98 8d       	ldd	r25, Y+24	; 0x18
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <main+0x230>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9c 8b       	std	Y+20, r25	; 0x14
    26bc:	8b 8b       	std	Y+19, r24	; 0x13
    26be:	3f c0       	rjmp	.+126    	; 0x273e <main+0x2ae>
	else if (__tmp > 65535)
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <main+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	69 8d       	ldd	r22, Y+25	; 0x19
    26da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9c 8b       	std	Y+20, r25	; 0x14
    26fe:	8b 8b       	std	Y+19, r24	; 0x13
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <main+0x290>
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9a 8b       	std	Y+18, r25	; 0x12
    2708:	89 8b       	std	Y+17, r24	; 0x11
    270a:	89 89       	ldd	r24, Y+17	; 0x11
    270c:	9a 89       	ldd	r25, Y+18	; 0x12
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <main+0x27e>
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8b 89       	ldd	r24, Y+19	; 0x13
    2718:	9c 89       	ldd	r25, Y+20	; 0x14
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9c 8b       	std	Y+20, r25	; 0x14
    271e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8b 89       	ldd	r24, Y+19	; 0x13
    2722:	9c 89       	ldd	r25, Y+20	; 0x14
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <main+0x272>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <main+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6d 89       	ldd	r22, Y+21	; 0x15
    272c:	7e 89       	ldd	r23, Y+22	; 0x16
    272e:	8f 89       	ldd	r24, Y+23	; 0x17
    2730:	98 8d       	ldd	r25, Y+24	; 0x18
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	98 8b       	std	Y+16, r25	; 0x10
    2744:	8f 87       	std	Y+15, r24	; 0x0f
    2746:	8f 85       	ldd	r24, Y+15	; 0x0f
    2748:	98 89       	ldd	r25, Y+16	; 0x10
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <main+0x2ba>
    274e:	98 8b       	std	Y+16, r25	; 0x10
    2750:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_vSend_char(' ');
				LCD_vSend_char((counter_yellow%10)+48);
			}
		}
		_delay_ms(500);
		LED_vTurnOn('D',2);
    2752:	84 e4       	ldi	r24, 0x44	; 68
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <LED_vTurnOn>
		LED_vTurnOff('D',1);
    275a:	84 e4       	ldi	r24, 0x44	; 68
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	0e 94 8c 06 	call	0xd18	; 0xd18 <LED_vTurnOff>
		LCD_clearscreen();
    2762:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_clearscreen>
		LCD_vSend_string("remaining  7 sec");
    2766:	82 e8       	ldi	r24, 0x82	; 130
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_vSend_string>
    276e:	1c c0       	rjmp	.+56     	; 0x27a8 <main+0x318>

		while(counter_red>0)
		{
			if(counter1>=100)
    2770:	80 91 9e 00 	lds	r24, 0x009E
    2774:	84 36       	cpi	r24, 0x64	; 100
    2776:	c0 f0       	brcs	.+48     	; 0x27a8 <main+0x318>
			{
				counter1=0;
    2778:	10 92 9e 00 	sts	0x009E, r1
				counter_red--;
    277c:	80 91 9d 00 	lds	r24, 0x009D
    2780:	81 50       	subi	r24, 0x01	; 1
    2782:	80 93 9d 00 	sts	0x009D, r24
				LCD_movecursor(1,11);
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	6b e0       	ldi	r22, 0x0B	; 11
    278a:	0e 94 22 0c 	call	0x1844	; 0x1844 <LCD_movecursor>
				LCD_vSend_char(' ');
    278e:	80 e2       	ldi	r24, 0x20	; 32
    2790:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_vSend_char>
				LCD_vSend_char((counter_red%10)+48);
    2794:	80 91 9d 00 	lds	r24, 0x009D
    2798:	9a e0       	ldi	r25, 0x0A	; 10
    279a:	69 2f       	mov	r22, r25
    279c:	0e 94 66 14 	call	0x28cc	; 0x28cc <__udivmodqi4>
    27a0:	89 2f       	mov	r24, r25
    27a2:	80 5d       	subi	r24, 0xD0	; 208
    27a4:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_vSend_char>
		LED_vTurnOn('D',2);
		LED_vTurnOff('D',1);
		LCD_clearscreen();
		LCD_vSend_string("remaining  7 sec");

		while(counter_red>0)
    27a8:	80 91 9d 00 	lds	r24, 0x009D
    27ac:	88 23       	and	r24, r24
    27ae:	01 f7       	brne	.-64     	; 0x2770 <main+0x2e0>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	aa ef       	ldi	r26, 0xFA	; 250
    27b6:	b3 e4       	ldi	r27, 0x43	; 67
    27b8:	8b 87       	std	Y+11, r24	; 0x0b
    27ba:	9c 87       	std	Y+12, r25	; 0x0c
    27bc:	ad 87       	std	Y+13, r26	; 0x0d
    27be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a ef       	ldi	r20, 0xFA	; 250
    27ce:	54 e4       	ldi	r21, 0x44	; 68
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	8f 83       	std	Y+7, r24	; 0x07
    27da:	98 87       	std	Y+8, r25	; 0x08
    27dc:	a9 87       	std	Y+9, r26	; 0x09
    27de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e0:	6f 81       	ldd	r22, Y+7	; 0x07
    27e2:	78 85       	ldd	r23, Y+8	; 0x08
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e8       	ldi	r20, 0x80	; 128
    27ee:	5f e3       	ldi	r21, 0x3F	; 63
    27f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f4:	88 23       	and	r24, r24
    27f6:	2c f4       	brge	.+10     	; 0x2802 <main+0x372>
		__ticks = 1;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	3f c0       	rjmp	.+126    	; 0x2880 <main+0x3f0>
	else if (__tmp > 65535)
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	3f ef       	ldi	r19, 0xFF	; 255
    280e:	4f e7       	ldi	r20, 0x7F	; 127
    2810:	57 e4       	ldi	r21, 0x47	; 71
    2812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2816:	18 16       	cp	r1, r24
    2818:	4c f5       	brge	.+82     	; 0x286c <main+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281a:	6b 85       	ldd	r22, Y+11	; 0x0b
    281c:	7c 85       	ldd	r23, Y+12	; 0x0c
    281e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2820:	9e 85       	ldd	r25, Y+14	; 0x0e
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e2       	ldi	r20, 0x20	; 32
    2828:	51 e4       	ldi	r21, 0x41	; 65
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <main+0x3d2>
    2844:	88 ec       	ldi	r24, 0xC8	; 200
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9c 83       	std	Y+4, r25	; 0x04
    284a:	8b 83       	std	Y+3, r24	; 0x03
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <main+0x3c0>
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	69 f7       	brne	.-38     	; 0x2844 <main+0x3b4>
    286a:	14 c0       	rjmp	.+40     	; 0x2894 <main+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286c:	6f 81       	ldd	r22, Y+7	; 0x07
    286e:	78 85       	ldd	r23, Y+8	; 0x08
    2870:	89 85       	ldd	r24, Y+9	; 0x09
    2872:	9a 85       	ldd	r25, Y+10	; 0x0a
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9e 83       	std	Y+6, r25	; 0x06
    287e:	8d 83       	std	Y+5, r24	; 0x05
    2880:	8d 81       	ldd	r24, Y+5	; 0x05
    2882:	9e 81       	ldd	r25, Y+6	; 0x06
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	9a 81       	ldd	r25, Y+2	; 0x02
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <main+0x3fc>
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
				LCD_vSend_char(' ');
				LCD_vSend_char((counter_red%10)+48);
			}
		}
		_delay_ms(500);
		LED_vTurnOff('D',2);
    2894:	84 e4       	ldi	r24, 0x44	; 68
    2896:	62 e0       	ldi	r22, 0x02	; 2
    2898:	0e 94 8c 06 	call	0xd18	; 0xd18 <LED_vTurnOff>
    289c:	13 ce       	rjmp	.-986    	; 0x24c4 <main+0x34>

0000289e <__vector_10>:
         
 }


ISR(TIMER0_COMP_vect)
{
    289e:	1f 92       	push	r1
    28a0:	0f 92       	push	r0
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	0f 92       	push	r0
    28a6:	11 24       	eor	r1, r1
    28a8:	8f 93       	push	r24
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
	counter1++;
    28b2:	80 91 9e 00 	lds	r24, 0x009E
    28b6:	8f 5f       	subi	r24, 0xFF	; 255
    28b8:	80 93 9e 00 	sts	0x009E, r24
}
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	8f 91       	pop	r24
    28c2:	0f 90       	pop	r0
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	0f 90       	pop	r0
    28c8:	1f 90       	pop	r1
    28ca:	18 95       	reti

000028cc <__udivmodqi4>:
    28cc:	99 1b       	sub	r25, r25
    28ce:	79 e0       	ldi	r23, 0x09	; 9
    28d0:	04 c0       	rjmp	.+8      	; 0x28da <__udivmodqi4_ep>

000028d2 <__udivmodqi4_loop>:
    28d2:	99 1f       	adc	r25, r25
    28d4:	96 17       	cp	r25, r22
    28d6:	08 f0       	brcs	.+2      	; 0x28da <__udivmodqi4_ep>
    28d8:	96 1b       	sub	r25, r22

000028da <__udivmodqi4_ep>:
    28da:	88 1f       	adc	r24, r24
    28dc:	7a 95       	dec	r23
    28de:	c9 f7       	brne	.-14     	; 0x28d2 <__udivmodqi4_loop>
    28e0:	80 95       	com	r24
    28e2:	08 95       	ret

000028e4 <__prologue_saves__>:
    28e4:	2f 92       	push	r2
    28e6:	3f 92       	push	r3
    28e8:	4f 92       	push	r4
    28ea:	5f 92       	push	r5
    28ec:	6f 92       	push	r6
    28ee:	7f 92       	push	r7
    28f0:	8f 92       	push	r8
    28f2:	9f 92       	push	r9
    28f4:	af 92       	push	r10
    28f6:	bf 92       	push	r11
    28f8:	cf 92       	push	r12
    28fa:	df 92       	push	r13
    28fc:	ef 92       	push	r14
    28fe:	ff 92       	push	r15
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	ca 1b       	sub	r28, r26
    290e:	db 0b       	sbc	r29, r27
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	09 94       	ijmp

0000291c <__epilogue_restores__>:
    291c:	2a 88       	ldd	r2, Y+18	; 0x12
    291e:	39 88       	ldd	r3, Y+17	; 0x11
    2920:	48 88       	ldd	r4, Y+16	; 0x10
    2922:	5f 84       	ldd	r5, Y+15	; 0x0f
    2924:	6e 84       	ldd	r6, Y+14	; 0x0e
    2926:	7d 84       	ldd	r7, Y+13	; 0x0d
    2928:	8c 84       	ldd	r8, Y+12	; 0x0c
    292a:	9b 84       	ldd	r9, Y+11	; 0x0b
    292c:	aa 84       	ldd	r10, Y+10	; 0x0a
    292e:	b9 84       	ldd	r11, Y+9	; 0x09
    2930:	c8 84       	ldd	r12, Y+8	; 0x08
    2932:	df 80       	ldd	r13, Y+7	; 0x07
    2934:	ee 80       	ldd	r14, Y+6	; 0x06
    2936:	fd 80       	ldd	r15, Y+5	; 0x05
    2938:	0c 81       	ldd	r16, Y+4	; 0x04
    293a:	1b 81       	ldd	r17, Y+3	; 0x03
    293c:	aa 81       	ldd	r26, Y+2	; 0x02
    293e:	b9 81       	ldd	r27, Y+1	; 0x01
    2940:	ce 0f       	add	r28, r30
    2942:	d1 1d       	adc	r29, r1
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	ed 01       	movw	r28, r26
    2950:	08 95       	ret

00002952 <_exit>:
    2952:	f8 94       	cli

00002954 <__stop_program>:
    2954:	ff cf       	rjmp	.-2      	; 0x2954 <__stop_program>
